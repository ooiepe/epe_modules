<?php
/**
 * Implements hook_views_api().
 */
function epe_dbvideo_views_api() {
  return array("api" => "3.0");
}

/**
  * Implements hook_menu
  */
function epe_dbvideo_menu() {
  $items = array();

  $items['api/resource/video'] = array(
    'title' => t('Restful Video Resource Query'),
    'page callback' => 'epe_dbdocument_restful_api',
    'file' => 'epe_dbvideo.rest.api.inc',
    'file path' => drupal_get_path('module', 'epe_dbvideo') . '/inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['node/%/videoembed'] = array(
    'title' => t('Embed Video Resource'),
    'page callback' => 'epe_dbvideo_embed',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_info().
 */
function epe_dbvideo_node_info() {
  $items = array(
    'video_resource' => array(
      'name' => t('Video resource'),
      'base' => 'node_content',
      'description' => t('Use <em>Video resource</em> when creating video file/embed resource object'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}


/**
 * Implements hook_theme_registry_alter()
**/
function epe_dbvideo_theme_registry_alter(&$theme_registry) {
  $template_path = drupal_get_path('module', 'epe_dbvideo') . '/templates';
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $template_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _epe_dbvideo_insert_after_first_element($theme_registry[$h]['theme paths'], $template_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _epe_dbvideo_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}


/**
 * Implements hook_node_type_insert().
 */
function epe_dbvideo_node_type_insert($content_type) {
  if ($content_type->type == 'video_resource') {
  module_load_include('inc','epe_dbvideo','inc/epe_dbvideo.field_base');
  module_load_include('inc','epe_dbvideo','inc/epe_dbvideo.field_instance');

    // Create all the fields we are adding to our content type.
    foreach (_video_resource_installed_fields() as $field) {
      //in case content type share fields
      if(!field_info_field($field['field_name'])) {
        field_create_field($field);
      }
    }

    // Create all the instances for our fields.
    foreach (_video_resource_installed_instances() as $instance) {
      field_create_instance($instance);
    }

    //assign custom content type permission
    _assign_epe_dbvideo_permission();
  }
}

function epe_dbvideo_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'video_resource_node_form') {
    drupal_add_js(drupal_get_path('module','epe_wp') . '/js/epe_wp.form.js');
    
    if(is_numeric(arg(1)) && arg(2) == 'edit') {
    $form['header'] = array(
      '#type'=>'container',
      '#prefix'=>'<div style="background-color: #c8d5de;padding:23px;margin-bottom:20px;"><div style="border: 1px solid #0195bd;background-color: #fff;padding:20px 31px;">',
      '#weight'=>-20,
    );

    $form['footer'] = array(
      '#type'=>'container',
      '#suffix'=>'</div></div>',
      '#weight'=>30,
    );
    }

    if(is_numeric(arg(1))) {
      $destination = 'node/' . arg(1);
    } else {
      $destination = 'db/';
    }

    $form['destination'] = array(
      '#type'=>'hidden',
      '#value'=>$destination,
    );

    $form['field_featured_status']['#type'] = 'hidden';
    $form['field_public_status']['#type'] = 'hidden';
    $form['field_video_resource_file']['#weight'] = -10;
    $form['field_video_resource_file']['und'][0]['#title'] = 'Video Resource File';

    $form['#attached']['css'] = array(
      drupal_get_path('module', 'epe_dbvideo') . '/epe_dbvideo_form.css',
    );

    if(is_numeric(arg(1))) {
      $form['actions']['saveas'] = array(
        '#type'=>'submit',
        '#access'=>1,
        '#value'=>t('Save As New'),
        '#weight'=>2,
        '#submit'=>array(
          'epe_dbvideo_save_as_submit',
          'node_form_submit',
        ),
      );

      $form['actions']['cancel']['#submit'] = array(
        'epe_dbvideo_cancel_from_edit_handler'
      );
    }
  }
}

function epe_dbvideo_save_as_submit($form, &$form_state) {
  $form_state['node']->vid = '';
  $form_state['node']->nid = '';
  $form_state['node']->status = 0;
  $form_state['node']->created = '';
  $form_state['node']->changed = '';
  $form_state['node']->is_new = 1;
  $form_state['node']->date = '';
  $form_state['node']->field_featured_status = array(
    'und'=>array(
      0=>array(
        ['value'] => 'Not-Featured'
      )
    )
  );
  $form_state['node']->field_public_status = array(
    'und'=>array(
      0=>array(
        ['value'] => 'Private'
      )
    )
  );
  $form_state['values']['nid'] = '';
  $form_state['values']['vid'] = '';
}

function epe_dbvideo_cancel_from_edit_handler($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form['nid']['#value'];
}

/*
 * assign custom content type permission base on epe supported author roles
 * the epe supported author roles is added from epe_wp module
 */
function _assign_epe_dbvideo_permission() {
  foreach(variable_get('EPE_SUPPORTED_AUTHOR_ROLES',array()) as $role_name) {
    $role = user_role_load_by_name($role_name);
    $role_perm = user_role_permissions(array($role->rid=>$role_name)); //get permission for role
    $author_permissions = array(
      'epe dbfiles interface' => array('grant' => TRUE, 'module' => 'epe_dbfiles'),
      'create video_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'delete any video_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'delete own video_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'edit any video_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'edit own video_resource content' => array('grant' => TRUE, 'module' => 'node'),
    );
    //I am not sure what hook I should use to invoke user_role_grant_permissions function
    //with the current implementation, hook_node_type_insert has not create the associated permission at this stage
    foreach($author_permissions as $key=>$assignment) {
      if($assignment['grant'] && !array_key_exists($key, $role_perm[$role->rid])) {
        db_insert('role_permission')
          ->fields(array(
            'rid' => $role->rid,
            'permission' => $key,
            'module' => $assignment['module'],
          ))
          ->execute();
      }
    }
  }

  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}

function epe_dbvideo_embed($nid) {
  $node = node_load($nid);
  if($node && $node->type == 'video_resource') {
    $field = field_get_items('node', $node, 'field_video_resource_file');
    $variables = array('video_path'=>'','poster'=>'');
    if($field) {
      $variables['video_path'] = $field[0]['uri'];
      if($field[0]['thumbnailfile']) {
        $variables['poster'] = $field[0]['thumbnailfile']->uri;
      }
      /*$item['uri'] = '';
      $item['file'] = '';
      if($field[0]['thumbnailfile']) {
        $item['thumbnail'] = image_style_url('resource_browser_thumbnail', $field[0]['thumbnailfile']->uri);
        $item['uri'] = $field[0]['thumbnailfile']->uri;
        $item['file'] = file_create_url($field[0]['uri']);
      }*/
    }
    return theme('video_resource_embed',array('video_path'=>file_create_url($variables['video_path']),'poster'=>file_create_url($variables['poster'])));
  } else {
    drupal_goto('node/' . $nid);
  }
}

function epe_dbvideo_theme() {
  $tpl_path = drupal_get_path('module','epe_dbvideo') . '/templates/';
  return array(
    'video_resource_embed' => array(
      'path' => $tpl_path,
      'template' => 'video_resource_embed',
      'variables' => array('video_path'=>'','poster'=>''),
    ),
  );
}

/**
 * Implements hook_default_search_api_index().
 */
function epe_dbvideo_default_search_api_index() {
  module_load_include('inc','epe_db','inc/epe_db.search_api_index_base_definition');
  $items = array();
  $items['video_resource_index'] = entity_import('search_api_index', _epe_db_search_api_index_base_definition('video resource search index','video_resource_index',array('video_resource')));
  return $items;
}
