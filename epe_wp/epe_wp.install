<?php

/**
 * Implements hook_install().
 */
function epe_wp_install() {
  module_load_include('inc','epe_wp','inc/epe_wp.account.field_base');
  module_load_include('inc','epe_wp','inc/epe_wp.account.field_instance');
  // Create all the fields we are adding to our content type.
  foreach (_account_installed_fields() as $field) {
    //in case content type share fields
    if(!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }

  // Create all the instances for our fields.
  foreach (_account_installed_instances() as $instance) {
    field_create_instance($instance);
  }

  module_load_include('inc','epe_wp','inc/epe_wp.page.field_instance');
  // Create all the instances for our fields.
  foreach (_epe_wp_page_field_default_field_instances() as $instance) {
    field_create_instance($instance);
  }

  variable_set('EPE_SUPPORTED_AUTHOR_ROLES',array('administrator','author','moderator'));
  variable_set('EPE_CONTENT_MODULES',array());
  variable_set('epe_menu',array());
  variable_set('epe_help',array('path'=>array()));

  //add author role
  //epe_wp_default_roles();
  foreach(variable_get('EPE_SUPPORTED_AUTHOR_ROLES',array()) as $role_name) {
    if($role_name != 'administrator') {
      $role = new stdClass();
      $role->name = $role_name;
      user_role_save($role);
    }
  }

  $filter_format = array(
    'format' => 'basic_page_filter',
    'name' => 'Basic Page Filter',
    'cache' => 1,
    'status' => 1,
    'weight' => 0,
    'filters' => array(
      'filter_html' => array(
        'weight' => -10,
        'status' => 1,
        'settings' => array(
          'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <h1> <h2> <h3> <h4> <h5> <div> <b> <strong> <i> <u> <span> <img> <p> <br> <table> <td> <tr> <th> <small>',
          'filter_html_help' => 1,
          'filter_html_nofollow' => 0,
        ),
      ),
      'filter_autop' => array(
        'weight' => 0,
        'status' => 1,
        'settings' => array(),
      ),
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
        'settings' => array(
          'filter_url_length' => 72,
        ),
      ),
    ),
  );
  $filter_format = (object) $filter_format;
  filter_format_save($filter_format);

  variable_set('imce_profiles', array(
    1 => array(
      'name' => 'User-1',
      'usertab' => 1,
      'filesize' => '0',
      'quota' => '0',
      'tuquota' => '0',
      'extensions' => '*',
      'dimensions' => '1200x1200',
      'filenum' => '0',
      'directories' => array(
        0 => array(
          'name' => 'basic_page',
          'subnav' => 1,
          'browse' => 1,
          'upload' => 1,
          'thumb' => 1,
          'delete' => 1,
          'resize' => 1,
        ),
      ),
      'thumbnails' => array(
        0 => array(
          'name' => 'Small',
          'dimensions' => '90x90',
          'prefix' => 'small_',
          'suffix' => '',
        ),
        1 => array(
          'name' => 'Medium',
          'dimensions' => '120x120',
          'prefix' => 'medium_',
          'suffix' => '',
        ),
        2 => array(
          'name' => 'Large',
          'dimensions' => '180x180',
          'prefix' => 'large_',
          'suffix' => '',
        ),
      ),
    ),
    2 => array(
      'name' => 'Sample profile',
      'usertab' => 1,
      'filesize' => 1,
      'quota' => 2,
      'tuquota' => 0,
      'extensions' => 'gif png jpg jpeg',
      'dimensions' => '800x600',
      'filenum' => 1,
      'directories' => array(
        0 => array(
          'name' => 'u%uid',
          'subnav' => 0,
          'browse' => 1,
          'upload' => 1,
          'thumb' => 1,
          'delete' => 0,
          'resize' => 0,
        ),
      ),
      'thumbnails' => array(
        0 => array(
          'name' => 'Thumb',
          'dimensions' => '90x90',
          'prefix' => 'thumb_',
          'suffix' => '',
        ),
      ),
    ),
  ));

  variable_set('imce_roles_profiles', array(
    5 => array(
      'weight' => '0',
      'public_pid' => 0,
    ),
    3 => array(
      'weight' => '0',
      'public_pid' => '1',
    ),
    4 => array(
      'weight' => '0',
      'public_pid' => 0,
    ),
    2 => array(
      'weight' => 11,
      'public_pid' => 0,
    ),
    1 => array(
      'weight' => 12,
      'public_pid' => 0,
    ),
  ));

  variable_set('imce_settings_disable_private', 0);
}



function epe_wp_enable() {
  db_update('system')
    ->fields(array('weight' => -10))
    ->condition('type', 'module')
    ->condition('name', 'epe_wp')
    ->execute();

  foreach(variable_get('EPE_SUPPORTED_AUTHOR_ROLES',array()) as $role_name) {
    if($role_name != 'author') {
      $role = user_role_load_by_name($role_name);
      user_role_grant_permissions($role->rid, array('epe wp moderate menu'));
    }
  }

  // set some system variables allowing visitors to login and not require email verification
  variable_set('user_register', 1);
  variable_set('user_email_verification', 0);


  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');

  $instance = field_read_instance('node', 'body', 'page');
  $instance['settings'] = array(
      'better_formats' => array(
        'allowed_formats' => array(
          'basic_page_filter' => 'basic_page_filter',
          'filtered_html' => 0,
          'full_html' => 0,
          'plain_text' => 0,
        ),
        'allowed_formats_toggle' => 1,
        'default_order_toggle' => 0,
        'default_order_wrapper' => array(
          'formats' => array(
            'basic_page_filter' => array(
              'weight' => 0,
            ),
            'filtered_html' => array(
              'weight' => 0,
            ),
            'full_html' => array(
              'weight' => 1,
            ),
            'plain_text' => array(
              'weight' => 10,
            ),
          ),
        ),
      ),
      'display_summary' => 1,
      'text_processing' => 1,
      'user_register_form' => FALSE,
    );
  field_update_instance($instance);

  $wysiwyg_profile = array(
    'format' => 'basic_page_filter',
    'editor' => 'ckeditor',
    'settings' => array(
      'default' => 1,
      'user_choose' => 0,
      'show_toggle' => 1,
      'theme' => 'advanced',
      'language' => 'en',
      'buttons' => array(
        'default' => array(
          'Bold' => 1,
          'Italic' => 1,
          'Underline' => 1,
          'BulletedList' => 1,
          'Link' => 1,
          'Unlink' => 1,
          'Image' => 1,
        ),
        'imce' => array(
          'imce' => 1,
        ),
      ),
      'toolbar_loc' => 'top',
      'toolbar_align' => 'left',
      'path_loc' => 'bottom',
      'resizing' => 1,
      'verify_html' => 1,
      'preformatted' => 0,
      'convert_fonts_to_spans' => 1,
      'remove_linebreaks' => 1,
      'apply_source_formatting' => 0,
      'paste_auto_cleanup_on_paste' => 0,
      'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
      'css_setting' => 'none',
      'css_path' => '',
      'css_classes' => '',
    ),
    'rdf_mapping' => array(),
  );

  $wysiwyg = db_insert('wysiwyg')->fields(array(
    'format' => $wysiwyg_profile['format'],
    'editor' => $wysiwyg_profile['editor'],
    'settings' => serialize($wysiwyg_profile['settings'])
  ))
  ->execute();

  $role = user_role_load_by_name('administrator');
  user_role_grant_permissions($role->rid, array('use text format basic_page_filter'));

  $clone_omitted = variable_get('clone_omitted',array());
  $clone_omitted['page'] = 'page';
  variable_set('clone_omitted', $clone_omitted);
}

function epe_wp_uninstall() {
  variable_del('EPE_SUPPORTED_AUTHOR_ROLES');
  variable_del('EPE_CONTENT_MODULES');
  variable_del('epe_menu');
  variable_del('epe_help');
}

/**
 * Update Moderator Resource LIst view (List of Pending Resources) to include field_public_status_value as one of the filter field
 */
function epe_wp_update_7000() {
  $view = views_get_view('moderator_resource_list', TRUE);
  $view->set_display('default');

  $view->display[$view->current_display]->display_options['filters']['field_public_status_value']['id'] = 'field_public_status_value';
  $view->display[$view->current_display]->display_options['filters']['field_public_status_value']['table'] = 'field_data_field_public_status';
  $view->display[$view->current_display]->display_options['filters']['field_public_status_value']['field'] = 'field_public_status_value';
  $view->display[$view->current_display]->display_options['filters']['field_public_status_value']['value'] = array(
    'Pending' => 'Pending',
  );

  views_save_view($view);
}

/**
 * epedev-363: fix view's context filter to accept user id from url when it's available else accept user id from logged in user
 * bug fix: featured resource also needs to be Public (status)
 */
function epe_wp_update_7001(&$sandbox) {
  $view = views_get_view('user_resources', TRUE);
  $view->set_display('default');

  $view->display[$view->current_display]->display_options['arguments']['uid']['id'] = 'uid';
  $view->display[$view->current_display]->display_options['arguments']['uid']['table'] = 'node';
  $view->display[$view->current_display]->display_options['arguments']['uid']['field'] = 'uid';
  $view->display[$view->current_display]->display_options['arguments']['uid']['default_action'] = 'default';
  $view->display[$view->current_display]->display_options['arguments']['uid']['default_argument_type'] = 'php';
  $view->display[$view->current_display]->display_options['arguments']['uid']['default_argument_options']['code'] = 'global $user;
  if(arg(0) == \'user\' && arg(1)) {
    $user_from_url = user_load(arg(1));
    if($user_from_url) { return $user_from_url->uid; } else {  return $user->uid; }
  } else {
    return $user->uid;
  }';
  $view->display[$view->current_display]->display_options['arguments']['uid']['summary']['number_of_records'] = '0';
  $view->display[$view->current_display]->display_options['arguments']['uid']['summary']['format'] = 'default_summary';
  $view->display[$view->current_display]->display_options['arguments']['uid']['summary_options']['items_per_page'] = '25';

  views_save_view($view);

  $view = views_get_view('featured_resources', TRUE);
  $view->set_display('all');
  $view->display[$view->current_display]->display_options['filters']['field_public_status_value']['id'] = 'field_public_status_value';
  $view->display[$view->current_display]->display_options['filters']['field_public_status_value']['table'] = 'field_data_field_public_status';
  $view->display[$view->current_display]->display_options['filters']['field_public_status_value']['field'] = 'field_public_status_value';
  $view->display[$view->current_display]->display_options['filters']['field_public_status_value']['value'] = array(
    'Public' => 'Public',
  );
  views_save_view($view);
}

/**
 * EPEDEV-366: add first name, last name and organization to registration form and make them required
 * epedev-303: add new display "favorite" to user resource view
 */
function epe_wp_update_7002(&$sandbox) {
  $fields = array('fname','lname','organization');
  foreach($fields as $field) {
    $field_instance = field_info_instance('user','field_account_'. $field,'user');
    $field_instance['required'] = 1;
    $field_instance['settings']['user_register_form'] = 1;
    field_update_instance($field_instance);
  }

  module_load_include('inc','epe_wp','epe_wp.views_default');

  $view_definition = epe_wp_views_default_views();
  views_save_view($view_definition['user_resources']);
}

/**
 * EPEDEV-521 add custom imce resize size
 */
function epe_wp_update_7003(&$sandbox) {
  $profiles = variable_get('imce_profiles');
  $profiles[1]['thumbnails'][] = array(
    'name'=>'custom_190w_140h',
    'dimensions'=>'190x140',
    'prefix'=>'',
    'suffix'=>'_190x140'
  );
  variable_set('imce_profiles',$profiles);
}