<?php

/**
 * Implements hook_views_api().
 */
function epe_ev_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Implements hook_node_info().
 */
function epe_ev_node_info() {
  $items = array(
    'ev_tool' => array(
      'name' => t('Visualization Tool'),
      'base' => 'node_content',
      'description' => 'Use <em>Visualization Tools</em> to create customizable visualizations.',
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
    'ev_tool_instance' => array(
      'name' => t('Visualization Instance'),
      'base' => 'node_content',
      'description' => t('<em>Visualization Instances</em> are used to save customized versions of Visualization Tools.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

//fields

// triggered as new content type is created

function epe_ev_node_type_insert($content_type) {

  module_load_include("inc","epe_ev","inc/epe_ev.field_base");
  module_load_include("inc","epe_ev","inc/epe_ev.field_instance");

  if ($content_type->type == 'ev_tool') {

    // Create all the fields we are adding to our content type.
    foreach (_epe_ev_tool_installed_fields() as $field) {

      //in case content type share fields
      if(!field_info_field($field['field_name'])) {
        field_create_field($field);
      }
    }

    // Create all the instances for our fields.
    foreach (_ev_tool_installed_instances() as $instance) {
      field_create_instance($instance);
    }

    //assign custom content type permission
    _assign_epe_ev_permission();
  }

  if ($content_type->type == 'ev_tool_instance') {

// Create all the fields we are adding to our content type.
    foreach (_ev_tool_instance_installed_fields() as $field) {

  //in case content type share fields
      if(!field_info_field($field['field_name'])) {
        field_create_field($field);
      }
    }

    // Create all the instances for our fields.
    foreach (_epe_ev_tool_instance_installed_instances() as $instance) {
      field_create_instance($instance);
    }

    //assign custom content type permission
    _assign_epe_ev_permission();
  }

}

/*
 * assign custom content type permission base on epe supported author roles
 * the epe supported author roles is added from epe_wp module
 */
function _assign_epe_ev_permission() {
  foreach(variable_get('EPE_SUPPORTED_AUTHOR_ROLES',array()) as $role_name) {
    $role = user_role_load_by_name($role_name);
    $role_perm = user_role_permissions(array($role->rid=>$role_name)); //get permission for role
    $author_permissions = array(
      'create ev_tool_instance content' => array('grant' => TRUE, 'module' => 'node'),
      'delete any ev_tool_instance content' => array('grant' => FALSE, 'module' => 'node'),
      'delete own ev_tool_instance content' => array('grant' => TRUE, 'module' => 'node'),
      'edit any ev_tool_instance content' => array('grant' => FALSE, 'module' => 'node'),
      'edit own ev_tool_instance content' => array('grant' => TRUE, 'module' => 'node'),
    );
    //I am not sure what hook I should use to invoke user_role_grant_permissions function
    //with the current implementation, hook_node_type_insert has not create the associated permission at this stage
    foreach($author_permissions as $key=>$assignment) {
      if($assignment['grant'] && !array_key_exists($key, $role_perm[$role->rid])) {
        db_insert('role_permission')
          ->fields(array(
            'rid' => $role->rid,
            'permission' => $key,
            'module' => $assignment['module'],
          ))
          ->execute();
      }
    }
  }

  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}

function epe_ev_theme() {
  $tpl_path = drupal_get_path('module','epe_ev') . '/templates/';
  return array(
    'ev_tool_instance_node_form'  => array(
      'render element' => 'form',
      'path' => $tpl_path,
      'template' => 'epe_ev_tool_instance_edit_form',
    ),
    'ev_tool_node_form'  => array(
      'render element' => 'form',
      'path' => $tpl_path,
      'template' => 'epe_ev_tool_edit_form'
    )
  );
}

/**
 * Implements hook_theme_registry_alter()
**/
function epe_ev_theme_registry_alter(&$theme_registry) {
  $template_path = drupal_get_path('module', 'epe_ev') . '/templates';
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $template_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _epe_ev_insert_after_first_element($theme_registry[$h]['theme paths'], $template_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _epe_ev_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

function epe_ev_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'ev_tool_instance_node_form') {
    drupal_add_js(drupal_get_path('module','epe_wp') . '/js/epe_wp.form.js');
    
    $form['options']['status']['#type'] = 'hidden';
    $form['field_source_nid']['#type'] = 'hidden';
    $form['#attached']['js'][] = libraries_get_path('formSavior') . '/jquery.formSavior.min.js';
    $form['#attached']['js']['jQuery(document).ready(function($) { $("form#ev-tool-instance-node-form").formSavior(); });'] = array( 'type' => 'inline');

    if(is_numeric(arg(1))) {
      $form['actions']['saveas'] = array(
        '#type'=>'submit',
        '#access'=>1,
        '#value'=>t('Save As New'),
        '#weight'=>2,
        '#submit'=>array(
          'epe_ev_save_as_submit',
          'node_form_submit',
        ),
      );

      $form['actions']['cancel']['#submit'] = array('epe_ev_cancel_from_edit_handler');
    }
  }

  if($form_id == 'ev_tool_node_form') {
    //$form['options']['status']['#type'] = 'hidden';
  }
}

function epe_ev_save_as_submit($form, &$form_state) {
  $form_state['node']->vid = '';
  $form_state['node']->nid = '';
  $form_state['node']->status = 0;
  $form_state['node']->created = '';
  $form_state['node']->changed = '';
  $form_state['node']->is_new = 1;
  $form_state['node']->date = '';
  $form_state['node']->field_featured_status = array(
    'und'=>array(
      0=>array(
        ['value'] => 'Not-Featured'
      )
    )
  );
  $form_state['node']->field_public_status = array(
    'und'=>array(
      0=>array(
        ['value'] => 'Private'
      )
    )
  );
  $form_state['values']['nid'] = '';
  $form_state['values']['vid'] = '';
}

function epe_ev_cancel_from_edit_handler($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form['nid']['#value'];
}

/*
* HOOK MENU
*/

function epe_ev_menu(){

  $items['api/resource/ev/%'] = array(
    'title' => t('EV Configuration Data'),
    //'page callback' => 'epe_ev_instance_config',
    'page callback' => 'epe_ev_restful_api_node',
    'page arguments' => array(3),
    'file' => 'epe_ev.api.inc',
    'file path' => drupal_get_path('module', 'epe_ev') . "/inc",
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api/resource/ev'] = array(
    'title' => t('Restful EV Resource Query'),
    'page callback' => 'epe_ev_restful_api',
    'file' => 'epe_ev.api.inc',
    'file path' => drupal_get_path('module', 'epe_ev') . "/inc",
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ev/api/%'] = array(
    'title' => t('EV Configuration Data'),
    'page callback' => 'epe_ev_instance_config',
    'page arguments' => array(2),
    'file' => 'epe_ev.api.inc',
    'file path' => drupal_get_path('module', 'epe_ev') . "/inc",
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ev/embed/%'] = array(
    'title' => t('EV Tool'),
    'page callback' => 'epe_ev_api_tool_load',
    'page arguments' => array(2,3,4),
    'file' => 'epe_ev.api.inc',
    'file path' => drupal_get_path('module', 'epe_ev') . "/inc",
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_default_search_api_index().
 * Add this function to your .module file, and replace the following placeholder text
 *
 * change [your_module_name] to your module name
 * change [your search index name] to a human readable name of your choice
 * change [your search index machine name] to a name of your choice must be text_text_text_etc format
 * change [content type machine name] to the machine name of your content type that this index is for
 *
 */
function epe_ev_default_search_api_index() {
  module_load_include('inc','epe_db','inc/epe_db.search_api_index_base_definition');
  $items = array();
  $items['epe_ev_search_index'] = entity_import('search_api_index', _epe_db_search_api_index_base_definition('visualization instance resource index','epe_ev_search_index',array('ev_tool_instance')));
  return $items;
}

/**
 * Implement hook_node_view to customize ev tool preview page
 */
 function epe_ev_node_view($node, $view_mode) {
   if($node->type == 'ev_tool' && $view_mode == 'full') {
     $node->title = $node->title . ' Preview';
     drupal_set_title($node->title);
   }
 }
