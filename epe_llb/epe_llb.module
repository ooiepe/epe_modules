<?php

/**
 * Implements hook_views_api().
 */
function epe_llb_views_api() {
  return array("api" => "3.0");
}

/**
 * Implements hook_ctools_plugin_api().
 */
function epe_llb_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "ds" && $api == "ds") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_ds_view_modes_info().
 */
function epe_llb_ds_view_modes_info() {
  $export = array();

  $ds_view_mode = new stdClass();
  $ds_view_mode->api_version = 1;
  $ds_view_mode->view_mode = 'llb_instructor';
  $ds_view_mode->label = 'LLB Instructor';
  $ds_view_mode->entities = array(
    'node' => 'node',
  );
  $export['llb_instructor'] = $ds_view_mode;

  return $export;
}

/**
 * Implements hook_image_default_styles().
 */
/*
 * image style specifically setup for llb resource
 */
function epe_llb_image_default_styles() {
  $styles = array();

  // Exported image style: llb_dataset_teaser.
  $styles['llb_dataset_teaser'] = array(
    'name' => 'llb_dataset_teaser',
    'effects' => array(
      3 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 270,
          'height' => 116,
        ),
        'weight' => 1,
      ),
    ),
  );

  // Exported image style: llb_detail_view.
  $styles['llb_detail_view'] = array(
    'name' => 'llb_detail_view',
    'effects' => array(
      2 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 480,
          'height' => 320,
        ),
        'weight' => 1,
      ),
    ),
  );

  // Exported image style: llb_teaser_view.
  $styles['llb_teaser_view'] = array(
    'name' => 'llb_teaser_view',
    'effects' => array(
      1 => array(
        'label' => 'Scale and crop',
        'help' => 'Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension. This is most useful for creating perfectly square thumbnails without stretching the image.',
        'effect callback' => 'image_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'image',
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 360,
          'height' => 240,
        ),
        'weight' => 1,
      ),
    ),
  );

  return $styles;
}

/**
  * Implements hook_menu
  */
function epe_llb_menu() {
  $items = array();

  $items['api/resource/llb'] = array(
    'title' => t('Restful Data Investigations Resource Query'),
    'page callback' => 'epe_llb_restful_api',
    'file' => 'epe_llb.rest.api.inc',
    'file path' => drupal_get_path('module', 'epe_llb') . '/inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api/resource/llb/%'] = array(
    'title' => t('Restful Single Data Investigation Resource Query'),
    'page callback' => 'epe_llb_restful_api_node',
    'page arguments' => array(3),
    'file' => 'epe_llb.rest.api.inc',
    'file path' => drupal_get_path('module', 'epe_llb') . '/inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api/resource/clone/%'] = array(
    'title' => t('Restful Data Investigations Clone Node'),
    'page callback' => 'epe_llb_restful_api_node_clone',
    'page arguments' => array(3),
    'file' => 'epe_llb.rest.api.inc',
    'file path' => drupal_get_path('module', 'epe_llb') . '/inc',
    'access callback' => 'user_access',
    'access arguments' => array('epe node clone api'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_info().
 */
function epe_llb_node_info() {
  $items = array(
    'llb_resource' => array(
      'name' => t('Data Investigation'),
      'base' => 'node_content',
      'description' => 'Use <em>Investigations</em> to create customizable data investigations',
      'has_title' => '1',
      'title_label' => t('Investigation Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Implements hook_node_type_insert().
 */
function epe_llb_node_type_insert($content_type) {
  if ($content_type->type == 'llb_resource') {
    module_load_include('inc','epe_llb','inc/epe_llb.field_base');
    module_load_include('inc','epe_llb','inc/epe_llb.field_instance');

    // Create all the fields we are adding to our content type.
    foreach (_epe_llb_field_default_field_bases() as $field) {
      //in case content type share fields
      if(!field_info_field($field['field_name'])) {
        field_create_field($field);
      }
    }

    // Create all the instances for our fields.
    foreach (_epe_llb_field_default_field_instances() as $instance) {
      field_create_instance($instance);
    }

    //assign custom content type permission
    _assign_epe_llb_permission();
  }
}

/*
 * assign custom content type permission base on epe supported author roles
 * the epe supported author roles is added from epe_wp module
 */
function _assign_epe_llb_permission() {
  foreach(variable_get('EPE_SUPPORTED_AUTHOR_ROLES',array()) as $role_name) {
    $role = user_role_load_by_name($role_name);
    $role_perm = user_role_permissions(array($role->rid=>$role_name)); //get permission for role
    $author_permissions = array(
      'create llb_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'delete any llb_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'delete own llb_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'edit any llb_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'edit own llb_resource content' => array('grant' => TRUE, 'module' => 'node'),
    );
    //I am not sure what hook I should use to invoke user_role_grant_permissions function
    //with the current implementation, hook_node_type_insert has not create the associated permission at this stage
    foreach($author_permissions as $key=>$assignment) {
      if($assignment['grant'] && !array_key_exists($key, $role_perm[$role->rid])) {
        db_insert('role_permission')
          ->fields(array(
            'rid' => $role->rid,
            'permission' => $key,
            'module' => $assignment['module'],
          ))
          ->execute();
      }
    }
  }

  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}

/**
  * setup the api access permissions
  */
function epe_llb_permission() {
  return array(
    'epe node clone api' => array(
      'title' => 'EPE Data Investigation Node Clone',
      'description' => 'Allow user to copy an existing node to use in Data Investigation.',
    ),
  );
}

/*
 * Implement hook_theme
 * This hook is to style edit form, the theme key needs to be the same as the form function name
 */
function epe_llb_theme() {
  $tpl_path = drupal_get_path('module','epe_llb') . '/templates/';
  $angular_tpl_path = drupal_get_path( 'module' , 'epe_llb' ) . '/app';
  return array(
    'llb_resource_node_form' => array(
      'path' => $tpl_path,
      'template' =>  "epe_llb_node_form",
      'render element' => 'form',
    ),
    'epe_llb_exploration.index.html' => array(
      'path' => "$angular_tpl_path/partial",
      'template'=> "epe_llb_exploration.index.html",
    ),
    'epe_llb_vertical_tab_info_container' => array(
      'path' => $tpl_path,
      'template' => 'epe_llb_vertical_tab_info_container',
      'variables' => array(
        'key' => '',
        'design_process' => '',
        'content_tips' => '',
        'pedagogy' => '',
      ),
    ),
    'epe_llb_homepage' => array(
      'path' => $tpl_path,
      'template' => 'epe_llb_homepage',
    ),
    'epe_llb_add_resource_modal_template' => array(
      'path' => $tpl_path,
      'template' => 'epe_llb_add_resource_modal_template',
      'variables' => array(
        'templateid' => '',
        'label' => '',
      ),
    ),
    'epe_llb_adhoc_modal_template' => array(
      'path' => $tpl_path,
      'template' => 'epe_llb_adhoc_modal_template',
    ),
    'epe_llb_field_slideshow' => array(
      'path' => $tpl_path,
      'template' => 'epe_llb_field_slideshow',
      'variables' => array(
        'images' => array(),
        'custom_id' => '',
      ),
    ),
  );
}

function epe_llb_homepage_render() {
  drupal_add_js(drupal_get_path('module','epe_llb') . '/js/epe_llb.homepage.js');
  return theme('epe_llb_homepage');
}


/*
 * implement node form alter
 */
function epe_llb_form_llb_resource_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module','epe_llb') . '/js/epe_llb.tab-history.js');
  if(isset($form_state['node']->nid)) {
    drupal_set_title('Edit your Data Investigation "' . $form['title']['#default_value'] . '"');
  } else {
    drupal_set_title('Create a new Data Investigation');
    $form['title']['#default_value'] = 'Untitled Investigation';
  }
  $form['#validate'][] = 'epe_llb_form_llb_resource_node_form_validate';

  $form['title']['#title_display'] = 'invisible';
  $form['field_source_nid']['#type'] = 'hidden';

  if( file_exists(drupal_get_path('module','epe_llb') . '/contents/challenge/thumbnail-prefix.html') ) {
    $form['field_challenge_thumbnail']['#prefix'] = file_get_contents( drupal_get_path('module','epe_llb') . '/contents/challenge/thumbnail-prefix.html');
  }

  if( file_exists(drupal_get_path('module','epe_llb') . '/contents/challenge/thumbnail-suffix.html') ) {
    $form['field_challenge_thumbnail']['#suffix'] = file_get_contents( drupal_get_path('module','epe_llb') . '/contents/challenge/thumbnail-suffix.html');
  }

  if( file_exists(drupal_get_path('module','epe_llb') . '/contents/instructor/field-instructional_content-prefix.html') ) {
    $form['field_instructional_content']['#prefix'] = file_get_contents( drupal_get_path('module','epe_llb') . '/contents/instructor/field-instructional_content-prefix.html');
  }

  if( file_exists(drupal_get_path('module','epe_llb') . '/contents/instructor/field-preconception_content-prefix.html') ) {
    $form['field_preconception_content']['#prefix'] = file_get_contents( drupal_get_path('module','epe_llb') . '/contents/instructor/field-preconception_content-prefix.html');
  }

  if( file_exists(drupal_get_path('module','epe_llb') . '/contents/instructor/field-resources_content-prefix.html') ) {
    $form['field_resources_content']['#prefix'] = file_get_contents( drupal_get_path('module','epe_llb') . '/contents/instructor/field-resources_content-prefix.html');
  }

  $form['block_objectives_info'] = array('#type' => 'container', '#attributes' => array());
  $block_objectives = module_invoke('epe_llb','block_view','epe_llb_objectives_info');
  $form['block_objectives_info'][] = array('#markup'=>$block_objectives['content']);

  $form['block_introduction_info'] = array('#type' => 'container', '#attributes' => array());
  $block_introduction = module_invoke('epe_llb','block_view','epe_llb_introduction_info');
  $form['block_introduction_info'][] = array('#markup'=>$block_introduction['content']);

  $form['block_background_info'] = array('#type' => 'container', '#attributes' => array());
  $block_background = module_invoke('epe_llb','block_view','epe_llb_background_info');
  $form['block_background_info'][] = array('#markup'=>$block_background['content']);

  $form['block_challenge_info'] = array('#type' => 'container', '#attributes' => array());
  $block_challenge = module_invoke('epe_llb','block_view','epe_llb_challenge_info');
  $form['block_challenge_info'][] = array('#markup'=>$block_challenge['content']);

  $form['block_exploration_info'] = array('#type' => 'container', '#attributes' => array());
  $block_exploration = module_invoke('epe_llb','block_view','epe_llb_exploration_info');
  $form['block_exploration_info'][] = array('#markup'=>$block_exploration['content']);

  $form['block_explanation_info'] = array('#type' => 'container', '#attributes' => array());
  $block_explanation = module_invoke('epe_llb','block_view','epe_llb_explanation_info');
  $form['block_explanation_info'][] = array('#markup'=>$block_explanation['content']);

  unset($form['field_desired_assessment']['und']['#options']['_none']);

  $default_intro_slideshow = $form['field_introductory_slideshow']['und'][0]['value']['#default_value'];
  $form['field_introductory_slideshow']['und'][0]['value']['#type'] = 'hidden';
  $form['field_introductory_slideshow']['#prefix'] = '<div class="app-main" ng-controller="intro">';
  $form['field_introductory_slideshow']['und'][0]['value']['#default_value'] = '{{items}}';

  $form['intro_slideshow_button'] = array(
    '#markup' => '<a href="#rbmodal" class="btn btn-success rbmodal" data-toggle="modal" data-toggle="modal" data-adhoc="true" data-controller="intro" data-api="all">Add Resources</a>',
    '#suffix' => '</div>', /* /controler=intro */
  );

  $default_background_slideshow = $form['field_background_slideshow']['und'][0]['value']['#default_value'];
  $form['field_background_slideshow']['und'][0]['value']['#type'] = 'hidden';
  $form['field_background_slideshow']['#prefix'] = '<div class="app-main" ng-controller="background">';
  $form['field_background_slideshow']['und'][0]['value']['#default_value'] = '{{items}}';
  $form['background_slideshow_button'] = array(
    '#markup' => '<a href="#rbmodal" class="btn btn-success rbmodal" data-toggle="modal" data-toggle="modal" data-adhoc="true" data-controller="background" data-api="image">Add Image</a>',
    '#suffix' => '</div>', /* /controler=background */
  );

  $default_challenge_thumbnail = $form['field_challenge_thumbnail']['und'][0]['value']['#default_value'];
  $form['field_challenge_thumbnail']['und'][0]['value']['#type'] = 'hidden';
  $form['field_challenge_thumbnail']['#prefix'] = '<div class="app-main" ng-controller="challenge">';
  $form['field_challenge_thumbnail']['und'][0]['value']['#default_value'] = '{{items}}';
  $form['challenge_thumbnail_button'] = array(
    '#markup' => '<a href="#rbmodal" class="btn btn-success rbmodal" data-toggle="modal" data-toggle="modal" data-adhoc="true" data-controller="challenge" data-api="image">Add Image</a>',
    '#suffix' => '</div>', /* /controler=challenge */
  );

  $default_dataset_value = $form['field_exploration_dataset']['und'][0]['value']['#default_value'];
  $form['field_exploration_dataset']['und'][0]['value']['#type'] = 'hidden';
  $form['field_exploration_dataset']['#prefix'] = '<div class="app-main" ng-controller="dataset">';
  $form['field_exploration_dataset']['und'][0]['value']['#default_value'] = '{{items}}';

  $depend_modules = variable_get('EPE_CONTENT_MODULES',array());
  unset($depend_modules['epe_llb']);

  $resource_browser_modals = array();

  $resource_browser_modals[] = theme('epe_llb_add_resource_modal_template');
  $resource_browser_modals[] = theme('epe_llb_adhoc_modal_template');

  $form['resource_browser_buttons'] = array(
    '#markup' => '<div><a href="#rbmodal" class="btn btn-success rbmodal" data-toggle="modal" data-toggle="modal" data-adhoc="true" data-controller="dataset" data-api="all">Add Resources</a>&nbsp;&nbsp;<a class="btn btn-success text_resource" data-controller="dataset" >Add Text Content</a></div>',
    '#suffix' => '</div>'  //end div.app-main
  );

  $form['resource_browser_modal'] = array(
    '#markup' => implode('', $resource_browser_modals),
  );

  $form['#attached']['css'] = array(
    drupal_get_path('module','epe_llb') . '/css/epe_llb.css'=>array('type'=>'file','group'=>CSS_THEME),
  );

  drupal_add_js(libraries_get_path('jquery-ui') . '/ui/jquery-ui.js');
  drupal_add_js(libraries_get_path('jquery-ui') . '/ui/jquery.ui.sortable.js');

  drupal_add_js(libraries_get_path('ckeditor') . '/ckeditor.js');

  $app_path = drupal_get_path('module', 'epe_llb') . '/app';

  $form['#attached']['js'][] = $app_path . '/app.js';
  $form['#attached']['js'][] = $app_path . '/explorationDirective.js';
  $form['#attached']['js'][] = libraries_get_path('angular-ui-bootstrap') . '/ui-bootstrap-tpls-0.6.0.min.js';
  $form['#attached']['js'][] = libraries_get_path('ui-sortable') . '/src/sortable.js';
  $form['#attached']['js'][] = drupal_get_path('module', 'epe_llb') . '/js/epe_llb.exploration_dataset.js';
  $form['#attached']['js'][] = drupal_get_path('module', 'epe_llb') . '/js/epe_llb.edit.intro_slideshow.js';

  $form['#attached']['js'][] = libraries_get_path('formSavior') . '/jquery.formSavior.min.js';

  $form['#attached']['js'][] = array(
    'data' => array(
      'default_dataset_value'=>$default_dataset_value,
      'default_intro_slideshow'=>$default_intro_slideshow,
      'default_background_slideshow'=>$default_background_slideshow,
      'default_challenge_thumbnail'=>$default_challenge_thumbnail,
      'llb'=> array(
        'thumbnail_placeholder'=>drupal_get_path('theme','bootstrap') . '/images/no_thumb_small.jpg'
      ),
      'epe_dbresource_browser'=>array(
        'modules' =>variable_get('EPE_CONTENT_MODULES',array()),
      ),
    ),
    'type' => 'setting',
  );
  $form['#attached']['js']['jQuery(document).ready(function($) { $("form#llb-resource-node-form").formSavior(); });'] = array( 'type' => 'inline');

  //additional settings
  $form['revision'] = array(
    '#type'=>'hidden',
    '#name' => 'revision',
    '#value' => 1
  );
}

function epe_llb_field_widget_form_alter(&$element, &$form_state, $context) {
  if(isset($element['#bundle']) && $element['#bundle'] == 'llb_resource') {
    unset($element['#title']);
  }

  if($context['field']['type'] == 'image') {
    unset($element[0]['#title']);
  }
}

function epe_llb_node_presave($node) {
  if($node->type == 'llb_resource' && $node->nid) {
    db_delete('resources_assoc')
    ->condition('parent', $node->nid, '=')
    ->execute();

    $datasets = _compile_associated_resources(json_decode($node->field_exploration_dataset['und'][0]['value']));

    $datasets = _compile_associated_resources(json_decode($node->field_challenge_thumbnail['und'][0]['value']), $datasets);

    $datasets = _compile_associated_resources(json_decode($node->field_background_slideshow['und'][0]['value']), $datasets);

    $datasets = _compile_associated_resources(json_decode($node->field_introductory_slideshow['und'][0]['value']), $datasets);

    foreach($datasets as $dataset) {
      db_insert('resources_assoc')
      ->fields(array(
        'parent' => $node->nid,
        'child' => $dataset->nid
      ))
      ->execute();
    }
  }
}

function epe_llb_node_delete($node) {
  db_delete('resources_assoc')
  ->condition('parent', $node->nid, '=')
  ->execute();
}

function epe_llb_node_insert($node) {
  $wrapper = entity_metadata_wrapper('node',$node);
  if($wrapper->getBundle() == 'llb_resource') {
    $datasets = _compile_associated_resources(json_decode($wrapper->field_exploration_dataset->value()));

    $datasets = _compile_associated_resources(json_decode($wrapper->field_challenge_thumbnail->value()), $datasets);

    $datasets = _compile_associated_resources(json_decode($wrapper->field_background_slideshow->value()), $datasets);

    $datasets = _compile_associated_resources(json_decode($wrapper->field_introductory_slideshow->value()), $datasets);

    foreach($datasets as $dataset) {
      db_insert('resources_assoc')
      ->fields(array(
        'parent' => $wrapper->getIdentifier(),
        'child' => $dataset->nid
      ))
      ->execute();
    }
  }
}

function _compile_associated_resources($datasets,$filtered_datasets=array()) {
  foreach($datasets as $dataset) {
    if(!array_key_exists($dataset->nid, $filtered_datasets) && $dataset->nid != 'NULL') {
      $filtered_datasets[$dataset->nid] = $dataset;
    }
  }
  return $filtered_datasets;
}

/**
 * Implements hook_theme_registry_alter()
**/
function epe_llb_theme_registry_alter(&$theme_registry) {
  $template_path = drupal_get_path('module', 'epe_llb') . '/templates';
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $template_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _epe_llb_insert_after_first_element($theme_registry[$h]['theme paths'], $template_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _epe_llb_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/*
 * implement hook_entity_view_mode_alter
 */
function epe_llb_entity_view_mode_alter(&$view_mode, $context) {
  if($view_mode == 'full' && $context['entity_type'] == 'node' && $context['entity']->type == 'llb_resource') {
    $node = node_load($context['entity']->nid);
    if($view_mode == 'full') {
      comment_node_view($node,'full');
    }

    if(!arg(2)) {
      $view_mode = 'teaser';
    } elseif ( arg(2) && arg(2) == 'detail') {
      drupal_add_css(drupal_get_path('module','epe_llb') . '/css/epe_llb.css',array('group'=>CSS_THEME));
      drupal_add_js(drupal_get_path('module', 'epe_cm') . '/swf/swfobject.js');
      drupal_add_js(drupal_get_path('module', 'epe_cm') . '/swf/swfaddress/swfaddress.js');

      drupal_add_js('jQuery(document).ready(function () { loadFlash(); });', array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));

      if(libraries_get_path('video-js')) {
        drupal_add_css(libraries_get_path('video-js') . '/video-js.css');
        drupal_add_js(libraries_get_path('video-js') . '/video.js');
        drupal_add_js('videojs.options.flash.swf = "' . base_path() . libraries_get_path('video-js') . '/video-js.swf"',array('type'=>'inline'));
      }
      drupal_add_js(drupal_get_path('module','epe_llb') . '/js/epe_llb.detailview.js');
    } elseif ( arg(2) && arg(2) == 'instructor' ) {
      $view_mode = 'llb_instructor';
    }
  }
}

/**
 * Validate handler for epe_llb_form_llb_resource_node_form.
 * set page title if validation failed
 */
function epe_llb_form_llb_resource_node_form_validate($form, &$form_state) {
  if(isset($form_state['node']->nid)) {
    drupal_set_title('Edit your Data Investigation "' . $form['title']['#default_value'] . '"');
  } else {
    drupal_set_title('Create a new Data Investigation');
  }
}

/*
 * implement hook_node_view_alter
 */
function epe_llb_node_view_alter(&$build) {
  if($build['#view_mode'] == 'full') {
    $build['field_introductory_content']['#label_display'] = 'hidden';
    $build['field_background_content']['#label_display'] = 'hidden';
    $build['field_background_slideshow']['#label_display'] = 'hidden';
    $build['field_background_question']['#label_display'] = 'hidden';
    $build['field_challenge_content']['#label_display'] = 'hidden';
    $build['field_challenge_thumbnail']['#label_display'] = 'hidden';
    if(!empty($build['field_desired_assessment'])) { $build['field_desired_assessment'][0]['#markup'] = 'The goal of this investigation is to ' . strtolower($build['field_desired_assessment'][0]['#markup']); }
    drupal_add_js(drupal_get_path('module','epe_llb') . '/js/epe_llb.exploration_dataset.view.js',array('scope'=>'footer'));
  }

  $epe_menu = variable_get('epe_menu',array());
  if($build['#view_mode'] == 'full' && $build['#entity_type'] == 'node' && $build['#bundle'] == 'page' && $build['#node']->nid == $epe_menu['llb']['nid']) {
    $build['#post_render'][] = 'epe_llb_homepage_render';
  }

  if($build['#view_mode'] == 'full' && $build['#entity_type'] == 'node' && $build['#bundle'] == 'llb_resource') {

    drupal_add_js(drupal_get_path('module','epe_llb') . '/js/epe_llb.tab-history.js');

    $nodes = array();
    $query = db_select('resources_assoc', 'a');
    $query->join('node','b','a.child = b.nid');
    $query->fields('a', array('child'))
                ->fields('b', array('type'))
                ->condition('parent', $build['#node']->nid, '=');
    $results = $query->execute();
    foreach ($results as $result) {
      $node = (object) array('nid'=>$result->child, 'type'=>$result->type);
      $nodes[] = $node;
    }
    $assoc_resources = array();
    foreach($nodes as $node) {
      $assoc_resources[$node->nid] = epe_llb_dataset_query($node);
    }

    $datasets = json_decode($build['field_exploration_dataset']['#items'][0]['value']);
    if($datasets) {
      foreach($datasets as &$dataset) {
        /*$data = $assoc_resources[$dataset->nid];
        $dataset->thumbnail = '';
        if(isset($data->thumbnail)): $dataset->thumbnail = $data->thumbnail; endif;
        if(isset($data->uri)): $dataset->uri = $data->uri; endif;
        if(isset($data->file)): $dataset->file = $data->file; endif;
        $dataset->credit = $data->credit;
        $dataset->source_url = $data->source_url;*/
        $dataset = epe_llb_reload_dataset($dataset, $assoc_resources);
      }
    }

    $build['field_exploration_dataset']['#items'][0]['value'] = json_encode($datasets);

    $intro_slideshow = json_decode($build['field_introductory_slideshow']['#items'][0]['value']);
    if($intro_slideshow) {
      foreach($intro_slideshow as &$dataset) {
        /*$data = $assoc_resources[$dataset->nid];
        $dataset->thumbnail = '';
        if(isset($data->thumbnail)): $dataset->thumbnail = $data->thumbnail; endif;
        if(isset($data->uri)): $dataset->uri = $data->uri; endif;
        if(isset($data->file)): $dataset->file = $data->file; endif;
        $dataset->credit = $data->credit;
        $dataset->source_url = $data->source_url;*/
        $dataset = epe_llb_reload_dataset($dataset, $assoc_resources);
      }
    }

    $build['field_introductory_slideshow']['#items'][0]['value'] = json_encode($intro_slideshow);

    $background_slideshow = json_decode($build['field_background_slideshow']['#items'][0]['value']);
    if($background_slideshow) {
      foreach($background_slideshow as &$dataset) {
/*        $data = $assoc_resources[$dataset->nid];
        $dataset->thumbnail = '';
        if(isset($data->thumbnail)): $dataset->thumbnail = $data->thumbnail; endif;
        if(isset($data->uri)): $dataset->uri = $data->uri; endif;
        if(isset($data->file)): $dataset->file = $data->file; endif;
        $dataset->credit = $data->credit;
        $dataset->source_url = $data->source_url;*/
        $dataset = epe_llb_reload_dataset($dataset, $assoc_resources);
      }
    }

    $build['field_background_slideshow']['#items'][0]['value'] = json_encode($background_slideshow);

    $challenge_thumbnail = json_decode($build['field_challenge_thumbnail']['#items'][0]['value']);
    if($challenge_thumbnail) {
      foreach($challenge_thumbnail as &$dataset) {
        /*$data = $assoc_resources[$dataset->nid];
        $dataset->thumbnail = '';
        if(isset($data->thumbnail)): $dataset->thumbnail = $data->thumbnail; endif;
        if(isset($data->uri)): $dataset->uri = $data->uri; endif;
        if(isset($data->file)): $dataset->file = $data->file; endif;
        $dataset->credit = $data->credit;
        $dataset->source_url = $data->source_url;*/
        $dataset = epe_llb_reload_dataset($dataset, $assoc_resources);
      }
    }
    $build['field_challenge_thumbnail']['#items'][0]['value'] = json_encode($challenge_thumbnail);
  }
}

/*
function epe_llb_field_formatter_rebuild($form, &$form_state) {
  //$form['field']['#prefix'] = 'This text will rule them all!';
  //drupal_add_css('hello.css'); //This line works even after validation fails.

  $form['field_background_question']['#title_display'] = 'invisible';
  $form['field_background_question']['und']['#title_display'] = 'invisible';
  $form['field_background_question']['und'][0]['value']['#title_display'] = 'invisible';
  echo '<pre>';
  print_r($form['field_background_question']);
  echo '</pre>';
  return $form;
}
*/

function epe_llb_block_info() {
  $blocks['epe_llb_objectives_info'] = array(
    'info' => t('EPE LLB Objectives Information'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['epe_llb_introduction_info'] = array(
    'info' => t('EPE LLB Introduction Information'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['epe_llb_background_info'] = array(
    'info' => t('EPE LLB Background Information'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['epe_llb_challenge_info'] = array(
    'info' => t('EPE LLB Challenge Information'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['epe_llb_exploration_info'] = array(
    'info' => t('EPE LLB Exploration Information'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['epe_llb_explanation_info'] = array(
    'info' => t('EPE LLB Explanation Information'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['epe_llb_featured'] = array(
    'info' => t('EPE Featured Investigation Resources'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function epe_llb_block_view($delta = '') {
  module_load_include('inc','epe_llb','inc/epe_llb.block');
  $block = array();
  $block['title'] = t('<none>');
  $block['content'] = '';

  $blocks_content = variable_get(
    'epe_llb_info_blocks_content',
    array(
      'epe_llb_objectives_info' => '',
      'epe_llb_introduction_info' => '',
      'epe_llb_background_info' => '',
      'epe_llb_challenge_info' => '',
      'epe_llb_exploration_info' => '',
      'epe_llb_explanation_info' => '',
    )
  );

  switch ($delta) {
    case 'epe_llb_objectives_info':
      $block['content'] = epe_llb_load_tab_info_block_content('objectives'); //$blocks_content['epe_llb_objectives_info'];
    break;

    case 'epe_llb_introduction_info':
      $block['content'] = epe_llb_load_tab_info_block_content('introduction'); //$blocks_content['epe_llb_introduction_info'];
    break;

    case 'epe_llb_background_info':
      $block['content'] = epe_llb_load_tab_info_block_content('background');//$blocks_content['epe_llb_background_info'];
    break;

    case 'epe_llb_challenge_info':
      $block['content'] = epe_llb_load_tab_info_block_content('challenge');//$blocks_content['epe_llb_challenge_info'];
    break;

    case 'epe_llb_exploration_info':
      $block['content'] = epe_llb_load_tab_info_block_content('exploration');//$blocks_content['epe_llb_exploration_info'];
    break;

    case 'epe_llb_explanation_info':
      $block['content'] = epe_llb_load_tab_info_block_content('explanation');//$blocks_content['epe_llb_explanation_info'];
    break;

    case 'epe_llb_featured':
      $block['title'] = t('Featured Investigations');
      $block['content'] = theme('epe_featured_block', array('type'=>array('llb_resource')));
    break;
  }

  return $block;
}

function epe_llb_dataset_query($dataset) {
  global $base_root;

  $depend_modules = variable_get('EPE_CONTENT_MODULES',array());
  unset($depend_modules['epe_llb']);
  $apiurl = $base_root . base_path() . 'api/resource/';

  foreach($depend_modules as $key=>$module) {
    if(isset($module['resource_browser'])) {
      if( (isset($module['content_type']) && $module['content_type'] === $dataset->type) || (in_array($dataset->type, array('video_resource','audio_resource')) && $key === 'epe_dbmultimedia')) {
        $apiurl .= $module['resource_browser']['api'] . '/';
        break;
      }
    }
  }
  $apiurl .= $dataset->nid;

  $ch = curl_init();
  $timeout = 5;
  curl_setopt($ch, CURLOPT_URL, $apiurl);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  $data = json_decode(curl_exec($ch));
  curl_close($ch);

  return $data;
}

/*
 * query resource
 */
function epe_llb_theme_file_dataset_image($dataset, $image_style=NULL) {
  $data = epe_llb_dataset_query($dataset);

  if($image_style && $data->uri) {
    $thumbnail_image = array('style_name' => $image_style, 'path' => $data->uri, 'alt' => $dataset->title, 'title' => $dataset->title);
    $output = theme('image_style', $thumbnail_image);
  } elseif(!$data->uri) {
    $output = '<img src="' . base_path() . drupal_get_path('theme','bootstrap') . '/images/no_thumb_small.jpg" alt="' . $dataset->title . '" title="' . $dataset->title . '">';
  } else {
    $output = '<img src="' . file_create_url($dataset->uri) .'"" width="886px" alt="' . $dataset->title . '" />';
  }

  return $output;
}

function epe_llb_theme_file_dataset($dataset) {
  $output = '';
  $credit_output = '';
  //$output = '<img src="' . image_style_url("llb_detail_view",$dataset->uri) .'"" width="886px" alt="' . $dataset->title . '" />';
  if($dataset->uri) {
    $display_image = file_create_url($dataset->uri);
  } else {
    $display_image = base_path() . drupal_get_path('theme','bootstrap') . '/images/no_thumb_small.jpg';
  }
  $output = '<img src="' . $display_image .'"" width="886px" alt="' . $dataset->title . '" />';
  //$output = epe_llb_theme_file_dataset_image($dataset);

  if(isset($dataset->file)) {
    switch($dataset->type) {
      case 'video_resource':
        $output = '<video id="video_' . $dataset->nid . '" class="video-js vjs-default-skin" controls preload="auto" width="640" height="264" poster="' . image_style_url("llb_detail_view",$dataset->uri) . '"><source src="' . file_create_url($dataset->file) . '" /></video>';
      break;

      case 'llb_resource':
        $output = '<a href="' . base_path() . 'node/' . $dataset->nid .'/detail">' . $output . '</a>';
      break;

      default:
        $output = '<a href="' . file_create_url($dataset->file) .'">' . $output . '</a>';
      break;
    }
  }

  $output = '<div class="clearfix"><center>' . $output . '</center></div>';
  $output .= '<div class="clearfix"><a href="'. base_path() .'node/'. $dataset->nid .'" class="pull-right">View Resource Page</a></div>';

  return $output;
}

function epe_llb_reload_dataset($dataset, $assoc_resources) {
  if($dataset->nid != 'NULL') {
    $data = $assoc_resources[$dataset->nid];
    $dataset->thumbnail = '';
    if(isset($data->thumbnail)): $dataset->thumbnail = $data->thumbnail; endif;
    if(isset($data->uri)): $dataset->uri = $data->uri; endif;
    if(isset($data->file)): $dataset->file = $data->file; endif;
    if(isset($data->credit)): $dataset->credit = $data->credit; endif;
    if(isset($data->source_url)): $dataset->source_url = $data->source_url; endif;
  }

  return $dataset;
}

/**
 * Implements hook_default_rules_configuration().
 */
function epe_llb_default_rules_configuration() {
  $items = array();
  $items['rules_llb_resource_redirect_on_save'] = entity_import('rules_config', '{ "rules_llb_resource_redirect_on_save" : {
      "LABEL" : "LLB resource redirect on save",
      "PLUGIN" : "reaction rule",
      "OWNER" : "rules",
      "TAGS" : [ "node" ],
      "REQUIRES" : [ "rules" ],
      "ON" : {
        "node_insert--llb_resource" : { "bundle" : "llb_resource" },
        "node_update--llb_resource" : { "bundle" : "llb_resource" }
      },
      "DO" : [ { "redirect" : { "url" : "node\\/[node:nid]\\/detail" } } ]
    }
  }');
  return $items;
}

/**
 * Implements hook_default_search_api_index().
 * Add this function to your .module file, and replace the following placeholder text
 *
 * change [your_module_name] to your module name
 * change [your search index name] to a human readable name of your choice
 * change [your search index machine name] to a name of your choice must be text_text_text_etc format
 * change [content type machine name] to the machine name of your content type that this index is for
 *
 */
function epe_llb_default_search_api_index() {
  module_load_include('inc','epe_db','inc/epe_db.search_api_index_base_definition');
  $items = array();
  $items['llb_resource_index'] = entity_import('search_api_index', _epe_db_search_api_index_base_definition('llb resource search index','llb_resource_index',array('llb_resource')));
  return $items;
}

