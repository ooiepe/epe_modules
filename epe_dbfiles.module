<?php
/**
  * Implement hook_permission
  */
function epe_dbfiles_permission() {
  return array(
    'epe dbfiles interface' => array(
      'title' => 'EPE DB File Interface',
      'description' => 'Allow user to use EPE db file interface.',
    ),
  );
}

/**
  * Implement hook_menu
  */
function epe_dbfiles_menu() {
  $items = array();

  $items['resource/add/file'] = array(
    'title' => t('Create EPE File Resrouce'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('epe_dbfiles_node_form'),
    'access callback' => 'user_access',
    'access arguments' => array('epe dbfiles interface,create image_resource content,create document_resource content,create audio_resource content,create video_resource content'),
    'type' => MENU_CALLBACK,
  );

  $items['resource/file/%/edit'] = array(
    'title' => t('Edit EPE File Resrouce'),
    'page callback' => 'epe_dbfile_node_edit',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('epe dbfiles interface,create image_resource content,create document_resource content,create audio_resource content,create video_resource content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
  * Implement hook_form
  */
function epe_dbfiles_node_form($node, &$form_state) {
  $validate_msgs = epe_dbfiles_requirements_validation();

  $form = array();
  if(!empty($validate_msgs)) {
    drupal_set_message(implode('<br/>', $validate_msgs),'error');
  } else {
    $depend_modules = variable_get('EPE_CONTENT_MODULES',array());

    $file_field_modules = array();
    $file_field_extensions = '';
    foreach($depend_modules as $module=>$type) {
      if($type == 'file') {
        $file_type = str_replace('epe_db', '', $module);
        $file_field_modules[] = ucwords($file_type);
        $field_instance = field_info_instance('node','field_'. $file_type .'srcfile', $file_type . '_resource');
        $file_field_extensions .= ucwords("{$file_type} resource: ") . $field_instance['settings']['file_extensions'] . '<br/>';
      }
    }
    $file_field_desc = 'Upload a file resource <em>(' . implode(',', $file_field_modules) . ')</em>, allowed extensions are:<br/>' . $file_field_extensions;

    $form['file'] = array(
      '#type' => 'file',
      '#title_display' => 'invisible',
      '#title' => t('Upload file resource'),
      '#description' => t($file_field_desc),
      '#attributes' => array('class'=>array('form-file-field')),
    );

    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#title_display' => 'invisible',
      '#required' => TRUE,
    );

    $form['body'] = array(
      '#type' => 'text_format',
      '#base_type' => 'textarea',
      '#title_display' => 'invisible',
      '#title' => t('Description'),
      '#required' => TRUE,
      '#format'=>'filtered_html',
    );

    if (($key = array_search('Image', $file_field_modules)) !== false) { unset($file_field_modules[$key]); }
    $form['thumbnail'] = array(
      '#type' => 'file',
      '#title' => t('Upload thumbnail'),
      '#title_display' => 'invisible',
      '#description' => t('Upload a thumbnail image for the file resource <em>(' . implode(',', $file_field_modules) . ')</em>, allowed extensions: jpg, jpeg, png, gif'),
    );

    $permission = array(1=>t('Yes'),0=>t('No'));
    $form['permission'] = array(
      '#type' => 'radios',
      '#title' => t('Permission'),
      '#title_display' => 'invisible',
      '#default_value' => 0,
      '#options' => $permission,
      '#field_prefix' => t('I hereby certify that this file is either my own work or I have been given permission to use it within an educational context'),
      '#ajax' => array(
        'callback' => 'epe_dbfiles_permission_check',
        'wrapper' => 'wrapper_submit'
      ),
    );

    $form['form-container']['node_type'] = array(
      '#type' => 'hidden',
      '#value' => '',
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit',
      '#attributes' => array('disabled'=>'disabled'),
      '#prefix' => '<div id="wrapper_submit">',
      '#suffix' => '</div>',
    );

    //add form specific js & css
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'epe_dbfiles') . '/epe_dbfiles.css' => array('type'=>'file','group'=>CSS_THEME),
    );
    $form['#attached']['js'][] = drupal_get_path('module', 'epe_dbfiles') . '/epe.dbfiles.js';
    $form['#attached']['js'][] = array(
      'data' => epe_dbfiles_js_settings(),
      'type' => 'setting',
    );
  }

  return $form;
}

function epe_dbfile_node_edit($nid) {
  $node = node_load($nid);
  //MUST DO, load node form for edit
  module_load_include('inc', 'node', 'node.pages');
  $form_id = $node->type . '_node_form';

  $form = drupal_get_form($form_id, $node);

  $form['title']['#title_display'] = 'invisible';
  $form['body']['und'][0]['value']['#title_display'] = 'invisible';
  unset($form['body']['und'][0]['summary']);

  $form['file-container'] = array( '#type' => 'container', '#attributes' => array() );
  $form['thumb-container'] = array( '#type' => 'container', '#attributes' => array() );

  switch($node->type) {
    case 'image_resource':
      $form['field_imagesrcfile']['und'][0]['#title_display'] = 'invisible';
      $form['file-container'][] = $form['field_imagesrcfile'];
    break;

    case 'document_resource':
      $form['field_documentsrcfile']['und'][0]['#title_display'] = 'invisible';
      $form['field_document_thumb']['und'][0]['#title_display'] = 'invisible';
      $form['file-container'][] = $form['field_documentsrcfile'];
      $form['thumb-container'][] = $form['field_document_thumb'];
      $form['thumb-container']['#attributes'] = array('class' => 'field');
    break;

    case 'video_resource':
      $form['field_videosrcfile']['und'][0]['#title_display'] = 'invisible';
      //have problem separating thumbnail field from video file field, comment out for now to look for work around
      /*$form['field_videosrcfile']['und'][0]['thumbnail']['#title_display'] = 'invisible';
      $form['thumb-container'][] = $form['field_videosrcfile']['und'][0]['thumbnail'];
      $form['thumb-container']['#attributes'] = array('class' => 'field');
      unset($form['field_videosrcfile']['und'][0]['thumbnail']);*/
      $form['file-container'][] = $form['field_videosrcfile'];
    break;

    case 'audio_resource':
      $form['field_audiosrcfile']['und'][0]['#title_display'] = 'invisible';
      $form['field_audio_thumb']['und'][0]['#title_display'] = 'invisible';
      $form['file-container'][] = $form['field_audiosrcfile'];
      $form['thumb-container'][] = $form['field_audio_thumb'];
      $form['thumb-container']['#attributes'] = array('class' => 'field');
    break;
  }

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'epe_dbfiles') . '/epe_dbfiles.css' => array('type'=>'file','group'=>CSS_THEME),
  );

  return $form;
}
/*
 * implement hook_menu_alter
 * this is to ensure our custom edit form's file field knows how to detail with it's own ajax action
 * without this, add/remove file/thumbnail will break
 */
function epe_dbfiles_menu_alter(&$items) {
  $items['file/ajax']['file'] = 'node.pages.inc';
  $items['file/ajax']['file path'] = drupal_get_path('module', 'node');
}

/*
 * implement hook_ajax_render_alter
 * return a modified output to fit our custom styling
 */
function epe_dbfiles_ajax_render_alter(&$commands) {
  if(arg(0) == 'file' && arg(1) == 'ajax') {
    //only want to execute changes if calling to our file resource content type asset fields
    $depend_modules = variable_get('EPE_CONTENT_MODULES',array());
    $field_found = false;
    foreach($depend_modules as $module=>$type) {
      if($type == 'file') {
        $file_type = str_replace('epe_db', '', $module);
        if(arg(2) === "field_{$file_type}srcfile" || arg(2) === "field_{$file_type}_thumb") {
          $field_found = true;
          break;
        }
      }
    }
    if($field_found):
    foreach($commands as &$command) {
      if($command['command'] == 'insert' && $command['method'] == 'replaceWith') {
        $command['data'] = preg_replace("/<label(.)+<\/label>/i", '', $command['data']);
      }
    }
    endif;
  }
}

/*
 * ajax call back from $form['permission'] field, returns drupal ajax css command
 */
function epe_dbfiles_permission_check($form, $form_state) {
  if($form_state['values']['permission'] == 1) {
    unset($form['submit']['#attributes']['disabled']);
  } else {
    $form['submit']['#attributes']['disabled'] = 'disabled';
  }
  return $form['submit'];
}

/**
 * Validate handler for file_resource_form().
 */
function epe_dbfiles_node_form_validate($form, &$form_state) {
  $allowed_extensions = '';
  $depend_modules = variable_get('EPE_CONTENT_MODULES',array());

  foreach($depend_modules as $module=>$type) {
    if($type == 'file') {
      $file_type = str_replace('epe_db', '', $module);
      $field_instance = field_info_instance('node','field_'. $file_type .'srcfile',$file_type . '_resource');
      $allowed_extensions .= ' ' . $field_instance['settings']['file_extensions'];
    }
  }

  $file = file_save_upload('file', array('file_validate_extensions' => array(trim($allowed_extensions)))); // Validate extensions.

  // If the file passed validation:
  if ($file) {
    // Move the file, into the Drupal file system
    if ($file = file_move($file, 'private://')) {
      $fileext = pathinfo($file->filename, PATHINFO_EXTENSION);
      // Save the file for use in the submit handler.
      $form_state['storage']['file'] = $file;
      foreach($depend_modules as $module=>$type) {
        if($type == 'file') {
          $file_type = str_replace('epe_db', '', $module);
          //determine which type of content we should create base on the file uploaded
          $field_instance = field_info_instance('node','field_'. $file_type .'srcfile',$file_type . '_resource');
          $allowed_extensions = explode(' ', $field_instance['settings']['file_extensions']);
          if(in_array(strtolower($fileext), $allowed_extensions)) {
            $form_state['values']['node_type'] = $file_type;
            break;
          }
        }
      }
    }
    else {
      form_set_error('file', t('Failed to write the uploaded file to the site\'s file folder.'));
    }
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }

  $thumb = file_save_upload('thumbnail', array('file_validate_extensions' => array('jpg gif png')));
  //if file pass validation
  if($thumb) {
    if($thumb = file_move($thumb, 'private://')) { $form_state['storage']['thumbnail'] = $thumb; }
  }
}

/*
 * Submit handler for file_resource_form()
 */
function epe_dbfiles_node_form_submit($form, &$form_state) {
  global $user;

  //create corresponding node with entity api
  $node_values = array(
    'type' => $form_state['values']['node_type'] . '_resource',
    'uid' => $user->uid,
    'status' => 0
  );
  $entity = entity_create('node', $node_values);

  $wrapper = entity_metadata_wrapper('node', $entity);
  $wrapper->title->set($form_state['values']['title']);
  $wrapper->body->set($form_state['values']['body']);
  //we'll deal with video file upload separately
  if($form_state['values']['node_type'] != 'video') {
    $entity_file_field = 'field_' . $form_state['values']['node_type'] . 'srcfile';
    $wrapper->{$entity_file_field}->file->set($form_state['storage']['file']);

    if(isset($form_state['storage']['thumbnail'])) {
      $entity_thumb_field = 'field_' . $form_state['values']['node_type'] . '_thumb';
      $wrapper->{$entity_thumb_field}->file->set($form_state['storage']['thumbnail']);
    }
  }

  $wrapper->save(true);

  /*
   * field from video module not showing in entity wrapper, not sure why, nothing in issue queue either
   * for now saving video file in the traditional node_save way
   */
  if($form_state['values']['node_type'] == 'video') {
    $node = node_load($wrapper->nid->value());
    $node->field_videosrcfile[LANGUAGE_NONE][0]['fid'] = $form_state['storage']['file']->fid;
    $node->field_videosrcfile[LANGUAGE_NONE][0]['thumbnail'] = '';
    $node->field_videosrcfile[LANGUAGE_NONE][0]['uid'] = $form_state['storage']['file']->uid;
    $node->field_videosrcfile[LANGUAGE_NONE][0]['filename'] = $form_state['storage']['file']->filename;
    $node->field_videosrcfile[LANGUAGE_NONE][0]['uri'] = $form_state['storage']['file']->uri;
    $node->field_videosrcfile[LANGUAGE_NONE][0]['filemime'] = $form_state['storage']['file']->filemime;
    $node->field_videosrcfile[LANGUAGE_NONE][0]['filesize'] = $form_state['storage']['file']->filesize;
    $node->field_videosrcfile[LANGUAGE_NONE][0]['status'] = $form_state['storage']['file']->status;
    $node->field_videosrcfile[LANGUAGE_NONE][0]['timestamp'] = $form_state['storage']['file']->timestamp;
    $node->field_videosrcfile[LANGUAGE_NONE][0]['type'] = 'video';
    $node->field_videosrcfile[LANGUAGE_NONE][0]['rdf_mapping'] = array();
    $playablefiles = new stdClass;
    $playablefiles->fid = $form_state['storage']['file']->fid;
    $playablefiles->thumbnail = '';
    $playablefiles->uid = $form_state['storage']['file']->uid;
    $playablefiles->filename = $form_state['storage']['file']->filename;
    $playablefiles->filemime = $form_state['storage']['file']->filemime;
    $playablefiles->uri = $form_state['storage']['file']->uri;
    $playablefiles->filesize = $form_state['storage']['file']->filesize;
    $playablefiles->status = $form_state['storage']['file']->status;
    $playablefiles->timestamp = $form_state['storage']['file']->timestamp;
    $playablefiles->type = 'video';
    $playablefiles->rdf_mapping = array();
    $node->field_videosrcfile[LANGUAGE_NONE][0]['playablefiles'] = array( $playablefiles );
    $node->field_videosrcfile[LANGUAGE_NONE][0]['thumbnailfile'] = '';

    if(isset($form_state['storage']['thumbnail'])) {
      $thumbinfo = image_get_info($form_state['storage']['thumbnail']->uri);
      $node->field_videosrcfile[LANGUAGE_NONE][0]['thumbnail'] = $form_state['storage']['thumbnail']->fid;
      $node->field_videosrcfile[LANGUAGE_NONE][0]['playablefiles'][0]->thumbnail = $form_state['storage']['thumbnail']->fid;
      $thumbnailfile = new stdClass;
      $thumbnailfile->fid = $form_state['storage']['thumbnail']->fid;
      $thumbnailfile->uid = $form_state['storage']['thumbnail']->uid;
      $thumbnailfile->filename = $form_state['storage']['thumbnail']->filename;
      $thumbnailfile->uri = $form_state['storage']['thumbnail']->uri;
      $thumbnailfile->filemime = $form_state['storage']['thumbnail']->filemime;
      $thumbnailfile->filesize = $form_state['storage']['thumbnail']->filesize;
      $thumbnailfile->status = $form_state['storage']['thumbnail']->status;
      $thumbnailfile->timestamp = $form_state['storage']['thumbnail']->timestamp;
      $thumbnailfile->type = 'image';
      $thumbnailfile->field_file_image_alt_text = array();
      $thumbnailfile->field_file_image_title_text = array();
      $thumbnailfile->rdf_mapping = array();
      $thumbnailfile->image_dimensions = array('width'=>$thumbinfo['width'], 'height'=>$thumbinfo['height']);
      $node->field_videosrcfile[LANGUAGE_NONE][0]['thumbnailfile'] = $thumbnailfile;
    }

    node_save($node);
  } //end video field save

  $form_state['redirect'] = 'node/' . $entity->nid;

  drupal_set_message("You have upload " . $wrapper->title->value() . " " . $form_state['values']['node_type'] . " resource.");
}

/*
 * custom function setting iamge and other file type extension for epe_dbfile javascript
 */
function epe_dbfiles_js_settings() {
  $depend_modules = variable_get('EPE_CONTENT_MODULES',array());

  $image_exts = array();
  $other_exts = array();
  foreach($depend_modules as $module=>$type) {
    if($type == 'file') {
      $file_type = str_replace('epe_db', '', $module);
      $field_instance = field_info_instance('node','field_'. $file_type .'srcfile', $file_type . '_resource');
      if($field_instance['settings']['file_extensions']) {
        if($file_type == 'image') {
          $image_exts = explode(" ",$field_instance['settings']['file_extensions']);
        } else {
          $other_exts = array_merge($other_exts, explode(" ",$field_instance['settings']['file_extensions']));
        }
      }
    }
  }

  return array(
    'image_exts' => json_encode($image_exts),
    'other_exts' => json_encode($other_exts),
  );
}

function epe_dbfiles_requirements_validation() {
  $messages = array();

  //variable set when enabling epe content mdoules
  $depend_modules = variable_get('EPE_CONTENT_MODULES',array());
  if(empty($depend_modules)): $messages[] = 'You must have at the minimum 1 of the file type resource module enabled.'; endif;

  $private_file_scheme = variable_get('file_default_scheme','');
  $private_file_path = variable_get('file_private_path','');

  if(!$private_file_path): $messages[] = 'Please enter a valid Drupal private file system path.'; endif;
  if(!$private_file_scheme): $messages[] = 'Please set Drupal default download method to "Private".'; endif;

  return $messages;
}

/*
 * Implement hook_theme
 * This hook is to style edit form, the theme key needs to be the same as the form function name
 */
function epe_dbfiles_theme() {
  return array(
    'epe_dbfiles_node_form' => array(
      'template' => 'epe_dbfiles_node_form',
      'render element' => 'form',
    ),
    'image_resource_node_form' => array(
      'template' => 'epe_dbfiles_node_edit_form',
      'render element' => 'form',
    ),
    'document_resource_node_form' => array(
      'template' => 'epe_dbfiles_node_edit_form',
      'render element' => 'form',
    ),
    'video_resource_node_form' => array(
      'template' => 'epe_dbfiles_node_edit_form',
      'render element' => 'form',
    ),
    'audio_resource_node_form' => array(
      'template' => 'epe_dbfiles_node_edit_form',
      'render element' => 'form',
    ),
  );
}
