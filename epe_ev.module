<?php

/**
* @file
* Module file for the EPE Educational Visualization service
*
* Part of the EPE System
*/

/**
  * Implement hook_menu
  */
function epe_ev_menu() {
  $items = array();

  $items['ev/add'] = array(
    'title' => t('Create a Visualization'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('epe_ev_form'),
    'access callback' => 'user_access',
    'access arguments' => array('create ev content'),
//    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_info().
 */
function epe_ev_node_info() {
  $items = array(
    'ev_resource' => array(
      'name' => t('EPE Visualization'),
      'base' => 'node_content',
      'description' => t('Use <em>Visualizations</em> to create visualization instances'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Implements hook_node_type_insert().
 */
function epe_ev_node_type_insert($content_type) {
  if ($content_type->type == 'ev_resource') {
    // Create all the fields we are adding to our content type.
    foreach (_ev_resource_installed_fields() as $field) {
      //in case content type share fields
      if(!field_info_field($field['field_name'])) {
        field_create_field($field);
      }
    }

    // Create all the instances for our fields.
    foreach (_ev_resource_installed_instances() as $instance) {
      field_create_instance($instance);
    }

    _assign_epe_ev_permission();
  }
}


/**
 * Define the fields for our content type.
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 */
function _ev_resource_installed_fields() {
  $fields = array();

  $fields['node-ev_resource-body'] = array(
    'field_name' => 'body',
    'cardinality' => '1',
    'type' => 'text_long',
  );

  $fields['node-ev_resource-vis_tool'] = array(
    'field_name' => 'vis_tool',
    'cardinality' => '1',
    'type' => 'text',
  );
  
  $fields['node-ev_resource-vis_config'] = array(
    'field_name' => 'vis_config',
    'cardinality' => '1',
    'type' => 'text_long',
  );

  $fields['node-ev_resource-questions'] = array(
    'field_name' => 'questions',
    'cardinality' => '1',
    'type' => 'text_long',
  );

  $fields['node-ev_resource-thumbnail'] = array(
      'field_name' => 'thumbnail',
      'cardinality' => '1',
      'type' => 'image',
      'entity_types' => array(),
      'foreign keys' => array(
        'fid' => array(
          'columns' => array(
            'fid' => 'fid',
          ),
          'table' => 'file_managed',
        ),
      ),
      'indexes' => array(
        'fid' => array(
          0 => 'fid',
        ),
      ),
      'locked' => '0',
      'module' => 'image',
      'settings' => array(
        'default_image' => 0,
        'uri_scheme' => 'private',
      ),
      'translatable' => '0',
  );

   
  return $fields;
}

/**
 * Define the field instances for our content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_example_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This big array is factored into this function for readability.
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 */
function _ev_resource_installed_instances() {
  $instances = array();

  $instances['node-ev_resource-body'] = array(
      'entity_type' => 'node',
      'bundle' => 'ev_resource',
      'field_name' => 'body',
      'label' => 'Description',
      'required' => 0,
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => '20',
          'summary_rows' => 5,
        ),
        'type' => 'text_textarea_with_summary',
        'weight' => '-4',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 0,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'module' => 'text',
          'settings' => array(
            'trim_length' => 600,
          ),
          'type' => 'text_summary_or_trimmed',
          'weight' => '0',
        ),
      ),
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'settings' => array(
        'display_summary' => 0,
        'text_processing' => '1',
        'user_register_form' => FALSE,
      ),
  );

  $instances['node-ev_resource-vis_tool'] = array(
      'entity_type' => 'node',
      'bundle' => 'ev_resource',
      'field_name' => 'vis_tool',
      'label' => 'Visualization Tool',
      'required' => 0,
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => '20',
          'summary_rows' => 5,
        ),
        'type' => 'text_textarea_with_summary',
        'weight' => '-4',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 0,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'module' => 'text',
          'settings' => array(
            'trim_length' => 600,
          ),
          'type' => 'text_summary_or_trimmed',
          'weight' => '0',
        ),
      ),
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'settings' => array(
        'display_summary' => 0,
        'text_processing' => '1',
        'user_register_form' => FALSE,
      ),
  );
  
  $instances['node-ev_resource-vis_config'] = array(
      'entity_type' => 'node',
      'bundle' => 'ev_resource',
      'field_name' => 'vis_config',
      'label' => 'Visualization Config',
      'required' => 0,
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => '20',
          'summary_rows' => 5,
        ),
        'type' => 'text_textarea_with_summary',
        'weight' => '-4',
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'settings' => array(
        'display_summary' => 0,
        'text_processing' => '1',
        'user_register_form' => FALSE,
      ),
  );
  
  $instances['node-ev_resource-questions'] = array(
      'entity_type' => 'node',
      'bundle' => 'ev_resource',
      'field_name' => 'questions',
      'label' => 'Investigation Questions',
      'required' => 0,
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'rows' => '20',
          'summary_rows' => 5,
        ),
        'type' => 'text_textarea_with_summary',
        'weight' => '-4',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 0,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'settings' => array(
        'display_summary' => 0,
        'text_processing' => '1',
        'user_register_form' => FALSE,
      ),
  );  

  $instances['node-ev_resource-thumbnail'] = array(
      'entity_type' => 'node',
      'bundle' => 'ev_resource',
      'field_name' => 'thumbnail',
      'label' => 'Thumbnail',
      'required' => 0,
      'widget' => array(
        'active' => 1,
        'module' => 'image',
        'settings' => array(
          'preview_image_style' => 'thumbnail',
          'progress_indicator' => 'throbber',
        ),
        'type' => 'image_image',
        'weight' => '-2',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'image',
          'settings' => array(
            'image_link' => '',
            'image_style' => '',
          ),
          'type' => 'image',
          'weight' => 2,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'deleted' => '0',
      'description' => '',
      'settings' => array(
        'alt_field' => 1,
        'default_image' => 0,
        'file_directory' => '',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'title_field' => 0,
        'user_register_form' => FALSE,
      ),
  );
  
  return $instances;
}

function _assign_epe_ev_permission() {
  foreach(explode(",",SUPPORTED_AUTHOR_ROLES) as $role_name) {
    $role = user_role_load_by_name($role_name);
    $role_perm = user_role_permissions(array($role->rid=>$role_name)); //get permission for role
    $author_permissions = array(
      'epe ev interface' => array('grant' => TRUE, 'module' => 'epe_dbfiles'),
      'create ev_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'delete any ev_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'delete own ev_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'edit any ev_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'edit own ev_resource content' => array('grant' => TRUE, 'module' => 'node'),
    );
    //I am not sure what hook I should use to invoke user_role_grant_permissions function
    //with the current implementation, hook_node_type_insert has not create the associated permission at this stage
    foreach($author_permissions as $key=>$assignment) {
      if($assignment['grant'] && !array_key_exists($key, $role_perm[$role->rid])) {
        db_insert('role_permission')
          ->fields(array(
            'rid' => $role->rid,
            'permission' => $key,
            'module' => $assignment['module'],
          ))
          ->execute();
      }
    }
  }

  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}


/**
  * Implement hook_form
  */
function epe_ev_form($node, &$form_state) {
  $form = array();
  if(!empty($validate_msgs)) {
    drupal_set_message(implode('<br/>', $validate_msgs),'error');
  } else {

    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#required' => TRUE,
    );

    $form['body'] = array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#required' => FALSE,
    );
    
    $form['vis_tool'] = array(
      '#type' => 'hidden',
      '#title' => t('Visualization Tool'),
      '#required' => TRUE,
      '#value' => "Tool1",
    );

    $form['vis_config'] = array(
      '#type' => 'hidden',
      '#title' => t('Visualization Configuration'),
      '#required' => TRUE,
      '#value' => "{}",
    );

    $form['questions'] = array(
      '#type' => 'textarea',
      '#title' => t('Investigation Questions'),
      '#required' => FALSE,
    );

    $form['thumbnail'] = array(
      '#type' => 'file',
      '#title' => t('Upload thumbnail'),
      '#description' => t('Upload a thumbnail, allowed extensions: jpg, jpeg, png, gif'),
      '#required' => FALSE,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit',
    );

  }

  return $form;

}


/**
 * Validate handler for file_resource_form().
 */
function epe_ev_form_validate($form, &$form_state) {
  $thumb = file_save_upload('thumbnail', array('file_validate_extensions' => array('jpg gif png')));
  //if file pass validation
  if($thumb) {
    if($thumb = file_move($thumb, 'private://')) { $form_state['storage']['thumbnail'] = $thumb; }
  }
}



/*
 * Submit handler for epe_ev_form()
 */

function epe_ev_form_submit($form, &$form_state) {
  global $user;

  //create corresponding node with entity api
  $node_values = array(
    'type' => 'ev_resource',
    'uid' => $user->uid,
    'status' => 0
  );
  $entity = entity_create('node', $node_values);

  $wrapper = entity_metadata_wrapper('node', $entity);
  $wrapper->title->set($form_state['values']['title']);
  $wrapper->body->set(array('value'=>$form_state['values']['body']));
  $wrapper->vis_tool->set(array('value'=>$form_state['values']['vis_tool']));
  $wrapper->vis_config->set(array('value'=>$form_state['values']['vis_config']));
  $wrapper->questions->set(array('value'=>$form_state['values']['questions']));
  if(isset($form_state['storage']['thumbnail'])) {
    $wrapper->thumbnail->file->set($form_state['storage']['thumbnail']);
  }
  $wrapper->save(true);

  $form_state['redirect'] = 'node/' . $entity->nid;

  drupal_set_message("You have save a new visualization: " . $wrapper->title->value() );
}



/**
 * Implements hook_views_api().
 */
function epe_ev_views_api() {
  return array("api" => "3.0");
}

