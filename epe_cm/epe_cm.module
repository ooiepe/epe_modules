<?php



/*
 * Implement hook_theme
 * This hook is to style edit form, the theme key needs to be the same as the form function name
 */
function epe_cm_theme() {
  $tpl_path = drupal_get_path('module','epe_cm') . '/templates/';
  return array(
    'cm_resource_node_form' => array(
      'path' => $tpl_path,
      'template' => 'epe_cm_node_edit_form',
      'render element' => 'form',
    ),
  );
}



/**
 * Implements hook_theme_registry_alter()
**/
function epe_cm_theme_registry_alter(&$theme_registry) {
  $template_path = drupal_get_path('module', 'epe_cm') . '/templates';
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $template_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _epe_cm_insert_after_first_element($theme_registry[$h]['theme paths'], $template_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _epe_cm_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/**
 * Implements hook_node_info().
 */
function epe_cm_node_info() {
  $items = array(
    'cm_resource' => array(
      'name' => t('Concept Map'),
      'base' => 'node_content',
      'description' => t('Use <em>Concept Maps</em> to create concept maps'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Implements hook_node_type_insert().
 */
function epe_cm_node_type_insert($content_type) {
  if ($content_type->type == 'cm_resource') {
    module_load_include('inc','epe_cm','inc/epe_cm.field_base');
    module_load_include('inc','epe_cm','inc/epe_cm.field_instance');

    // Create all the fields we are adding to our content type.
    foreach (_epe_cm_field_default_field_bases() as $field) {
      //in case content type share fields
      if(!field_info_field($field['field_name'])) {
        field_create_field($field);
      }
    }

    // Create all the instances for our fields.
    foreach (_epe_cm_field_default_field_instances() as $instance) {
      field_create_instance($instance);
    }

    //assign custom content type permission
    _assign_epe_cm_permission();
  }
}

/*
 * assign custom content type permission base on epe supported author roles
 * the epe supported author roles is added from epe_wp module
 */
function _assign_epe_cm_permission() {
  foreach(variable_get('EPE_SUPPORTED_AUTHOR_ROLES',array()) as $role_name) {
    $role = user_role_load_by_name($role_name);
    $role_perm = user_role_permissions(array($role->rid=>$role_name)); //get permission for role
    $author_permissions = array(
      'create cm_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'delete any cm_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'delete own cm_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'edit any cm_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'edit own cm_resource content' => array('grant' => TRUE, 'module' => 'node'),
    );
    //I am not sure what hook I should use to invoke user_role_grant_permissions function
    //with the current implementation, hook_node_type_insert has not create the associated permission at this stage
    foreach($author_permissions as $key=>$assignment) {
      if($assignment['grant'] && !array_key_exists($key, $role_perm[$role->rid])) {
        db_insert('role_permission')
          ->fields(array(
            'rid' => $role->rid,
            'permission' => $key,
            'module' => $assignment['module'],
          ))
          ->execute();
      }
    }
  }

  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}

/**
  * Implements hook_menu
  */
function epe_cm_menu() {
  $items = array();


  $items['api/resource/cm'] = array(
    'title' => t('Restful CM Resource Query'),
    'page callback' => 'epe_cm_restful_api',
    'file' => 'epe_cm.rest.api.inc',
    'file path' => drupal_get_path('module', 'epe_cm') . '/inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api/resource/cm/%'] = array(
    'title' => t('Restful CM Resource Data'),
    'page callback' => 'epe_cm_data_restful_api',
    'page arguments' => array(3),
    'file' => 'epe_cm.rest.api.inc',
    'file path' => drupal_get_path('module', 'epe_cm') . '/inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}



function epe_cm_node_insert($node) {
  $wrapper = entity_metadata_wrapper('node',$node);
  if($wrapper->getBundle() == 'cm_resource') {
    $child_assets = array();
    db_delete('resources_assoc')
    ->condition('parent', $wrapper->getIdentifier(), '=')
    ->execute();

    $xml = new SimpleXMLElement($wrapper->field_cm_data->value());

    foreach($xml->concept as $concept) {
      if($concept->assets) {
        foreach ($concept->assets as $asset) {
          foreach ($asset->xpath('//node') as $asset_node) {
            if (!in_array((string)$asset_node['id'], $child_assets))
              $child_assets[] = (string)$asset_node['id'];

          }
        }
      }
    }

    foreach ($child_assets as $child_asset) {
      db_insert('resources_assoc')
      ->fields(array(
        'parent' => $wrapper->getIdentifier(),
        'child' => $child_asset
      ))
      ->execute();
    }
  }
}

function epe_cm_node_update($node) {
  $wrapper = entity_metadata_wrapper('node',$node);
  if($wrapper->getBundle() == 'cm_resource') {
    $child_assets = array();
    db_delete('resources_assoc')
    ->condition('parent', $wrapper->getIdentifier(), '=')
    ->execute();

    $xml = new SimpleXMLElement($wrapper->field_cm_data->value());

    foreach($xml->concept as $concept) {
      if($concept->assets) {
        foreach ($concept->assets as $asset) {
          foreach ($asset->xpath('//node') as $asset_node) {
            if (!in_array((string)$asset_node['id'], $child_assets))
              $child_assets[] = (string)$asset_node['id'];

          }
        }
      }
    }

    foreach ($child_assets as $child_asset) {
      db_insert('resources_assoc')
      ->fields(array(
        'parent' => $wrapper->getIdentifier(),
        'child' => $child_asset
      ))
      ->execute();
    }
  }
}





/**
 * Implements hook_views_api().
 * If your module hadn't implement this hook function, please add it to your .module file, and replace the placeholder text
 */
function epe_cm_views_api() {
  return array("api" => "3.0");
}

/**
 * Implements hook_default_search_api_index().
 * Add this function to your .module file, and replace the following placeholder text
 *
 * change [your_module_name] to your module name
 * change [your search index name] to a human readable name of your choice
 * change [your search index machine name] to a name of your choice must be text_text_text_etc format
 * change [content type machine name] to the machine name of your content type that this index is for
 *
 */
function epe_cm_default_search_api_index() {
  $items = array();
  $items['epe_cm_search_index'] = entity_create('search_api_index', array(
    'name' => 'EPE CM Search Index',
    'machine_name' => 'epe_cm_search_index',
    'description' => null,
    'server' => 'database_service',
    'item_type' => 'node',
    'options' => array(
      'index_directly' => 1,
      'cron_limit' => '50',
      'fields' => array(
        'nid' => array('type'=>'integer'),
        'type' => array('type'=>'string'),
        'title' => array('type'=>'string'),
        'url' => array('type'=>'string'),
        'status' => array('type'=>'integer'),
        'promote' => array('type'=>'boolean'),
        'created' => array('type'=>'date'),
        'changed' => array('type'=>'date'),
        'author' => array('type'=>'integer', 'entity_type'=>'user'),
        'search_api_language' => array('type'=>'string'),
        'author:uid' => array('type'=>'integer'),
        'author:name' => array('type'=>'string'),
        'author:mail' => array('type'=>'string'),
        'author:field_account_fname' => array('type'=>'string'),
        'author:field_account_lname' => array('type'=>'string'),
        'author:field_account_organization' => array('type'=>'text'),
        'body:value' => array('type'=>'text'),
        'body:summary' => array('type'=>'text'),
      ),
      'data_alter_callbacks' => array(
        'search_api_alter_bundle_filter' => array(
          'status' => 1,
          'weight' => '-10',
          'settings' => array(
            'default' => 0,
            'bundles' => array('cm_resource'=>'cm_resource'),
          ),
          'search_api_alter_node_access' => array('status'=>0, 'weight'=>'0', 'settings'=>array()),
          'search_api_alter_node_status' => array('status'=>0, 'weight'=>'0', 'settings'=>array()),
          'search_api_alter_add_hierarchy' => array('status'=>0, 'weight'=>'0', 'settings'=>array('fields'=>array())),
          'search_api_alter_add_viewed_entity' => array('status'=>0, 'weight'=>'0', 'settings'=>array('mode'=>'full')),
          'search_api_alter_add_url' => array('status'=>0, 'weight'=>0, 'settings'=>array()),
          'search_api_alter_add_aggregation' => array('status'=>1,'weight'=>0,'settings'=>array(
                'fields'=>array('search_api_aggregation_1'=>array(
                  'name'=>'title_main_body_fulltext_search',
                  'type'=>'fulltext',
                  'fields'=>array('title','body:value'),
                  'description'=>'A Fulltext aggregation of the following fields: Title, The main body text \\u00bb Text.',
                ),
              ),
            ),
          ),
        ),
        'processors' => array(
          'search_api_case_ignore' => array('status'=>0, 'weight'=>0, 'settings'=>array('fields'=>array('title'=>true, 'body:value'=>true))),
          'search_api_html_filter' => array('status'=>0, 'weight'=>'10',
            'settings'=>array(
              'fields'=>array('title'=>true, 'body:value'=>true),
              'title'=>0, 'alt'=>1, 'tags'=>array('h1 = 5\\r\\nh2 = 3\\r\\nh3 = 2\\r\\nstrong = 2\\r\\nb = 2\\r\\nem = 1.5\\r\\nu = 1.5'),
            ),
          ),
          'search_api_tokenizer' => array('status'=>0, 'weight'=>'20',
            'fields'=>array('title'=>true, 'body:value'=>true),
            'spaces'=>'[^[:alnum:]]','ignorable'=>'[\\u0027]',
          ),
          'search_api_stopwords' => array('status'=>0, 'weight'=>'30', 'fields'=>array('title'=>true, 'body:value'=>true),'file'=>'','stopwords'=>'but\\r\\ndid\\r\\nthe this that those\\r\\netc',
          )
        ),
      ),
    ),
    'enabled' => '1',
    'read_only' => '0',
    'rdf_mapping' => array(),
  ));
  return $items;
}


/*
 * Alter the cancel behavior of the edit forms
 */
function epe_cm_form_alter (&$form, &$form_state, $form_id) {

  if ($form_id == 'cm_resource_node_form') {
    $form['#submit'] = array('cm_resource_node_form_submit_custom');
  }


}



function cm_resource_node_form_submit_custom($form, &$form_state) {
  global $user;
  //unset($form_state['submit_handlers']);
  $node = $form_state['node'];
  entity_form_submit_build_entity('node', $node, $form, $form_state);
  $insert = empty($node->nid);
  node_save($node);

  $file_destination = 'private://' . $user->uid . '/' . $form_state['values']['type'];
  file_prepare_directory($file_destination, FILE_CREATE_DIRECTORY);

  $file = file_save_data(base64_decode($form_state['input']['thumbdata']), $file_destination . "/thumb_" . $node->nid . ".png", FILE_EXISTS_REPLACE);

  $newnode = node_load($node->nid);
  $newnode->field_instance_thumbnail['und'][0] = (array)$file;
  node_save($newnode);


  $node_link = l(t('view'), 'node/' . $node->nid);
  $watchdog_args = array(
    '@type' => $node->type,
    '%title' => $node->title,
  );
  $t_args = array(
    '@type' => node_type_get_name($node),
    '%title' => $node->title,
  );

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }

  cache_clear_all();

  drupal_goto('node/' . $node->nid);

  return;

}





