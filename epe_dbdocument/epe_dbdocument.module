<?php
/**
 * Implements hook_views_api().
 */
function epe_dbdocument_views_api() {
  return array("api" => "3.0");
}

/**
  * Implements hook_menu
  */
function epe_dbdocument_menu() {
  $items = array();

  $items['api/resource/document'] = array(
    'title' => t('Restful Document Resource Query'),
    'page callback' => 'epe_dbdocument_restful_api',
    'file' => 'epe_dbdocument.rest.api.inc',
    'file path' => drupal_get_path('module', 'epe_dbdocument') . '/inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['api/resource/document/%'] = array(
    'title' => t('Restful Single Document Resource Query'),
    'page callback' => 'epe_dbdocument_restful_api_node',
    'page arguments' => array(3),
    'file' => 'epe_dbdocument.rest.api.inc',
    'file path' => drupal_get_path('module', 'epe_dbdocument') . '/inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_info().
 */
function epe_dbdocument_node_info() {
  $items = array(
    'document_resource' => array(
      'name' => t('Document resource'),
      'base' => 'node_content',
      'description' => t('Use <em>Document resource</em> when creating document file resource object'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}


/**
 * Implements hook_theme_registry_alter()
**/
function epe_dbdocument_theme_registry_alter(&$theme_registry) {
  $template_path = drupal_get_path('module', 'epe_dbdocument') . '/templates';
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $template_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _epe_dbdocument_insert_after_first_element($theme_registry[$h]['theme paths'], $template_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _epe_dbdocument_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/**
 * Implements hook_node_type_insert().
 */
function epe_dbdocument_node_type_insert($content_type) {
  if ($content_type->type == 'document_resource') {
    module_load_include('inc','epe_dbdocument','inc/epe_dbdocument.field_base');
    module_load_include('inc','epe_dbdocument','inc/epe_dbdocument.field_instance');

    // Create all the fields we are adding to our content type.
    foreach (_document_resource_installed_fields() as $field) {
      //in case content type share fields
      if(!field_info_field($field['field_name'])) {
        field_create_field($field);
      }
    }

    // Create all the instances for our fields.
    foreach (_document_resource_installed_instances() as $instance) {
      field_create_instance($instance);
    }

    //assign custom content type permission
    _assign_epe_dbdocument_permission();
  }
}

/*
 * assign custom content type permission base on epe supported author roles
 * the epe supported author roles is added from epe_wp module
 */
function _assign_epe_dbdocument_permission() {
  foreach(variable_get('EPE_SUPPORTED_AUTHOR_ROLES',array()) as $role_name) {
    $role = user_role_load_by_name($role_name);
    $role_perm = user_role_permissions(array($role->rid=>$role_name)); //get permission for role
    $author_permissions = array(
      'epe dbfiles interface' => array('grant' => TRUE, 'module' => 'epe_dbfiles'),
      'create document_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'delete any document_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'delete own document_resource content' => array('grant' => TRUE, 'module' => 'node'),
      'edit any document_resource content' => array('grant' => FALSE, 'module' => 'node'),
      'edit own document_resource content' => array('grant' => TRUE, 'module' => 'node'),
    );
    //I am not sure what hook I should use to invoke user_role_grant_permissions function
    //with the current implementation, hook_node_type_insert has not create the associated permission at this stage
    foreach($author_permissions as $key=>$assignment) {
      if($assignment['grant'] && !array_key_exists($key, $role_perm[$role->rid])) {
        db_insert('role_permission')
          ->fields(array(
            'rid' => $role->rid,
            'permission' => $key,
            'module' => $assignment['module'],
          ))
          ->execute();
      }
    }
  }

  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}

/**
 * Implements hook_block_view_alter()
 * (******NOT USED NOW******)
 */
/*
function epe_dbdocument_block_view_alter(&$data, $block) {
  $views_block_hashes = variable_get('views_block_hashes',array());
  foreach($views_block_hashes as $hash=>$value) {
    if($value == 'document_resource_index-block_list' && $block->delta == $hash) {
      drupal_add_css(drupal_get_path('module','epe_dbdocument') . '/epe_dbdocument.css');
    }
  }
}
*/

/**
 * Implements hook_default_search_api_index().
 */
function epe_dbdocument_default_search_api_index() {
  $items = array();
  $items['document_resource_index'] = entity_create('search_api_index', array(
    'name' => 'document resource index',
    'machine_name' => 'document_resource_index',
    'description' => null,
    'server' => 'database_service',
    'item_type' => 'node',
    'options' => array(
      'index_directly' => 1,
      'cron_limit' => '50',
      'fields' => array(
        'nid' => array('type'=>'integer'),
        'type' => array('type'=>'string'),
        'title' => array('type'=>'text'),
        'url' => array('type'=>'string'),
        'status' => array('type'=>'integer'),
        'promote' => array('type'=>'boolean'),
        'created' => array('type'=>'date'),
        'changed' => array('type'=>'date'),
        'author' => array('type'=>'integer', 'entity_type'=>'user'),
        'search_api_language' => array('type'=>'string'),
        'author:uid' => array('type'=>'integer'),
        'author:name' => array('type'=>'string'),
        'author:mail' => array('type'=>'string'),
        'author:field_account_fname' => array('type'=>'text'),
        'author:field_account_lname' => array('type'=>'text'),
        'author:field_account_organization' => array('type'=>'text'),
        'body:value' => array('type'=>'text'),
        'body:summary' => array('type'=>'text'),
      ),
      'data_alter_callbacks' => array(
        'search_api_alter_bundle_filter' => array(
          'status' => 1,
          'weight' => '-10',
          'settings' => array(
            'default' => 0,
            'bundles' => array('document_resource'=>'document_resource'),
          ),
          'search_api_alter_node_access' => array('status'=>0, 'weight'=>'0', 'settings'=>array()),
          'search_api_alter_node_status' => array('status'=>0, 'weight'=>'0', 'settings'=>array()),
          'search_api_alter_add_hierarchy' => array('status'=>0, 'weight'=>'0', 'settings'=>array('fields'=>array())),
          'search_api_alter_add_viewed_entity' => array('status'=>0, 'weight'=>'0', 'settings'=>array('mode'=>'full')),
          'search_api_alter_add_url' => array('status'=>0, 'weight'=>0, 'settings'=>array()),
          'search_api_alter_add_aggregation' => array('status'=>1,'weight'=>0,'settings'=>array(
                'fields'=>array('search_api_aggregation_1'=>array(
                  'name'=>'title_main_body_fulltext_search',
                  'type'=>'fulltext',
                  'fields'=>array('title','body:value'),
                  'description'=>'A Fulltext aggregation of the following fields: Title, The main body text \\u00bb Text.',
                ),
              ),
            ),
          ),
        ),
        'processors' => array(
          'search_api_case_ignore' => array('status'=>0, 'weight'=>0, 'settings'=>array('fields'=>array('title'=>true, 'body:value'=>true))),
          'search_api_html_filter' => array('status'=>0, 'weight'=>'10',
            'settings'=>array(
              'fields'=>array('title'=>true, 'body:value'=>true),
              'title'=>0, 'alt'=>1, 'tags'=>array('h1 = 5\\r\\nh2 = 3\\r\\nh3 = 2\\r\\nstrong = 2\\r\\nb = 2\\r\\nem = 1.5\\r\\nu = 1.5'),
            ),
          ),
          'search_api_tokenizer' => array('status'=>0, 'weight'=>'20',
            'fields'=>array('title'=>true, 'body:value'=>true),
            'spaces'=>'[^[:alnum:]]','ignorable'=>'[\\u0027]',
          ),
          'search_api_stopwords' => array('status'=>0, 'weight'=>'30', 'fields'=>array('title'=>true, 'body:value'=>true),'file'=>'','stopwords'=>'but\\r\\ndid\\r\\nthe this that those\\r\\netc',
          )
        ),
      ),
    ),
    'enabled' => '1',
    'read_only' => '0',
    'rdf_mapping' => array(),
  ));
  return $items;
}

/*
 * custom function for creating test node
 * this function may be removed in the future pending design
 * (******NOT USED NOW******)
 */
/*
function epe_dbdocument_default_nodes() {
  global $user;
  //default node for document resource list block layout
  $node_values = array(
    'type' => 'page',
    'uid' => $user->uid,
    'status' => 1
  );
  $entity = entity_create('node', $node_values);
  $wrapper = entity_metadata_wrapper('node', $entity);
  $wrapper->title->set('document resource list');
  //$wrapper->url = 'document-resource-list';
  $wrapper->save(true);

  ctools_include('export');
  $context = ctools_export_new_object('context');
  $context->name = 'document-resource-list';
  $context->description = 'default document resource list page';
  $context->tag = 'block layout';
  $context->conditions = array(
    'path' => array(
      'values' => array(
        'document-resource-list' => 'document-resource-list',
      ),
    ),
  );

  //$context->reactions = array(
  //  'block' => array(
  //    'blocks' => array(
  //      'views-4b5995069acedbe7bfa31e2745b013e6' => array(
  //        'module' => 'views',
  //        'delta' => '4b5995069acedbe7bfa31e2745b013e6',
  //        'region' => 'content',
  //        'weight' => '-10',
  //      ),
  //    ),
  //  ),
  //);

  $context->condition_mode = 0;
  $saved = context_save($context);
}
*/
